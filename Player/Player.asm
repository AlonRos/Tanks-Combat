.model flat, stdcall
.stack 100h

option casemap:none

include <\masm32\include\windows.inc>
include <\masm32\include\kernel32.inc>
include <\masm32\include\user32.inc>
include <\masm32\include\Gdi32.inc>
include <\masm32\include\Ws2_32.inc>
include <\masm32\include\Winmm.inc>

WINDOW_WIDTH equ 700
WINDOW_HEIGHT equ 700
BACKGROUND_COLOR equ 0066b2ffh

MY_TANK_COLOR equ 00ff0000h
MY_BULLETS_OUTLINE_COLOR equ 00ff0000h
MY_BULLETS_INSIDE_COLOR equ 00666111h

OPPONENT_TANK_COLOR equ 000000ffh
OPPONENT_BULLETS_OUTLINE_COLOR equ 000000ffh
OPPONENT_BULLETS_INSIDE_COLOR equ 00123456h

WALLS_COLOR equ 0000ff00h
BULLET_RADIUS equ 5
FRAME_DEPTH equ 40

TIMER_REDRAW equ 0
TIMER_SEND_POSITIONS_MSG equ 1

MAX_MAX_BULLETS equ 80

READY_MSG equ 1
START_GAME_MSG equ 2 ; structure: [byte:START_GAME_MSG], [dword:numberOfWalls], [dword:bulletLife], [byte:maxBulletsInAnyMoment], [RECTs:walls]
SWAP_LOCATIONS_MSG equ 3
POSITIONS_MSG equ 4 ; structure: [byte:POSITIONS_MSG] [POINT:position of tank] [dword:ptr state - ptr state0] [POINTs:positions of bullets]
END_ROUND_MSG equ 5 ; lose if I sent, win if I receive

TPoint struct

	x sbyte ?
	y sbyte ?
	
TPoint ends


TState struct

	velocity TPoint{}
	bulletVelocity TPoint {}
	tankPixelsOffsetsArrayPTR dword ?
	BarrelEdgeOffsetPTR dword ?
	rectanglePTR dword ?
	leftRightStartPTR dword ?
	leftRightEndPTR dword ?
	tankPixelsAmount dword ?
	
TState ends


TTank struct
	
	centerPosition POINT{}
	statePTR dword ?

TTank ends

TBullet struct
	
	centerPosition POINT{}
	velocity TPoint{}
	timeShot dword ?
	lastDrawnPosition POINT{}

TBullet ends


GameLoopParams struct
	
	myTankPTR dword ?
	myPrevTankPTR dword ?
	myBulletsPTR dword ?
	opponentTankPTR dword ?
	maxBullets byte ?
	bulletLifeDuration dword ?
	gameOverPTR dword ?
	losePTR dword ?
	w_a_s_d_space dword ?
	state0PTR dword ?
	lastStatePTR dword ?
	opponentBulletsPTR dword ?
	wallsPTR dword ?
	shotSoundPathPTR dword ?
	bulletHitWallSoundPathPTR dword ?
	explosionSoundPathPTR dword ?
	amountWalls dword ?
	windowHandle HWND ?
	sock SOCKET ?

GameLoopParams ends

recvMessagesParams struct
	
	sock SOCKET ?
	exitMessageLoopPTR dword ?
	myTankPTR dword ?
	myPrevTankPTR dword ?
	opponentTankPTR dword ?
	opponentPrevTankPTR dword ?
	state0PTR dword ?
	opponentBulletsPTR dword ?
	gameOverPTR dword ?
	winPTR dword ?
	wallsPTR dword ?
	numberOfWallsPTR dword ?
	maxBulletsInAnyMomentPTR dword ?
	bulletLifePTR dword ?
	explosionSoundPathPTR dword ?

recvMessagesParams ends

.data?
hInstance HMODULE ?
windowHandle HWND ?
hRecvReadyThread HANDLE ?
hGameLoopThread HANDLE ?
Socket SOCKET ?
wsaData WSADATA{}

.const
windowName db "Project Window", 0
className db "My Window class", 0

state0DrawStart TPoint {-10, -10}, {-9, -10}, {-8, -10}, {-7, -10}, {-6, -10}, {-5, -10}, {-4, -10}, {-3, -10}, {-2, -10}, {-1, -10}, {0, -10}, {1, -10}, {2, -10}, {3, -10}, {4, -10}, {5, -10}, {-10, -9}, {-9, -9}, {-8, -9}, {-7, -9}, {-6, -9}, {-5, -9}, {-4, -9}, {-3, -9}, {-2, -9}, {-1, -9}, {0, -9}, {1, -9}, {2, -9}, {3, -9}, {4, -9}, {5, -9}, {-10, -8}, {-9, -8}, {-8, -8}, {-7, -8}, {-6, -8}
TPoint {-5, -8}, {-4, -8}, {-3, -8}, {-2, -8}, {-1, -8}, {0, -8}, {1, -8}, {2, -8}, {3, -8}, {4, -8}, {5, -8}, {-10, -7}, {-9, -7}, {-8, -7}, {-7, -7}, {-6, -7}, {-5, -7}, {-4, -7}, {-3, -7}, {-2, -7}, {-1, -7}, {0, -7}, {1, -7}, {2, -7}, {3, -7}, {4, -7}, {5, -7}, {-10, -6}, {-9, -6}, {-8, -6}, {-7, -6}, {-6, -6}, {-5, -6}, {-4, -6}, {-3, -6}, {-2, -6}, {-1, -6}, {0, -6}, {1, -6}, {2, -6}
TPoint {3, -6}, {4, -6}, {5, -6}, {-5, -5}, {-4, -5}, {-3, -5}, {-2, -5}, {-1, -5}, {0, -5}, {1, -5}, {-5, -4}, {-4, -4}, {-3, -4}, {-2, -4}, {-1, -4}, {0, -4}, {1, -4}, {-5, -3}, {-4, -3}, {-3, -3}, {-2, -3}, {-1, -3}, {0, -3}, {1, -3}, {-5, -2}, {-4, -2}, {-3, -2}, {-2, -2}, {-1, -2}, {0, -2}, {1, -2}, {-5, -1}, {-4, -1}, {-3, -1}, {-2, -1}, {-1, -1}, {0, -1}, {1, -1}, {2, -1}, {3, -1}
TPoint {4, -1}, {5, -1}, {6, -1}, {7, -1}, {8, -1}, {9, -1}, {10, -1}, {-5, 0}, {-4, 0}, {-3, 0}, {-2, 0}, {-1, 0}, {0, 0}, {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}, {6, 0}, {7, 0}, {8, 0}, {9, 0}, {10, 0}, {-5, 1}, {-4, 1}, {-3, 1}, {-2, 1}, {-1, 1}, {0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {-5, 2}, {-4, 2}, {-3, 2}, {-2, 2}, {-1, 2}, {0, 2}
TPoint {1, 2}, {-5, 3}, {-4, 3}, {-3, 3}, {-2, 3}, {-1, 3}, {0, 3}, {1, 3}, {-5, 4}, {-4, 4}, {-3, 4}, {-2, 4}, {-1, 4}, {0, 4}, {1, 4}, {-5, 5}, {-4, 5}, {-3, 5}, {-2, 5}, {-1, 5}, {0, 5}, {1, 5}, {-10, 6}, {-9, 6}, {-8, 6}, {-7, 6}, {-6, 6}, {-5, 6}, {-4, 6}, {-3, 6}, {-2, 6}, {-1, 6}, {0, 6}, {1, 6}, {2, 6}, {3, 6}, {4, 6}, {5, 6}, {-10, 7}, {-9, 7}, {-8, 7}, {-7, 7}, {-6, 7}, {-5, 7}
TPoint {-4, 7}, {-3, 7}, {-2, 7}, {-1, 7}, {0, 7}, {1, 7}, {2, 7}, {3, 7}, {4, 7}, {5, 7}, {-10, 8}, {-9, 8}, {-8, 8}, {-7, 8}, {-6, 8}, {-5, 8}, {-4, 8}, {-3, 8}, {-2, 8}, {-1, 8}, {0, 8}, {1, 8}, {2, 8}, {3, 8}, {4, 8}, {5, 8}, {-10, 9}, {-9, 9}, {-8, 9}, {-7, 9}, {-6, 9}, {-5, 9}, {-4, 9}, {-3, 9}, {-2, 9}, {-1, 9}, {0, 9}, {1, 9}, {2, 9}, {3, 9}, {4, 9}, {5, 9}, {-10, 10}, {-9, 10}
TPoint {-8, 10}, {-7, 10}, {-6, 10}, {-5, 10}, {-4, 10}, {-3, 10}, {-2, 10}, {-1, 10}, {0, 10}, {1, 10}, {2, 10}, {3, 10}, {4, 10}
state0DrawEnd TPoint {5, 10}
state0BarrelEdge TPoint {10, 0}
state0Rectangle RECT {-10, -10, 10, 10}
state0LeftRightStart TPoint {-10, -10}, {5, -10}, {-10, -9}, {5, -9}, {-10, -8}, {5, -8}, {-10, -7}, {5, -7}, {-10, -6}, {5, -6}, {-5, -5}, {1, -5}, {-5, -4}, {1, -4}, {-5, -3}, {1, -3}, {-5, -2}, {1, -2}, {-5, -1}, {10, -1}, {-5, 0}, {10, 0}, {-5, 1}, {10, 1}, {-5, 2}, {1, 2}, {-5, 3}, {1, 3}, {-5, 4}, {1, 4}, {-5, 5}, {1, 5}, {-10, 6}, {5, 6}, {-10, 7}, {5, 7}, {-10, 8}, {5, 8}, {-10, 9}
TPoint {5, 9}, {-10, 10}
state0LeftRightEnd TPoint {5, 10}

state1DrawStart TPoint {-6, -13}, {-5, -12}, {-5, -12}, {-4, -12}, {-3, -11}, {-2, -11}, {-1, -11}, {0, -10}, {1, -10}, {2, -10}, {3, -10}, {4, -9}, {5, -9}, {6, -9}, {7, -8}, {8, -8}, {-7, -12}, {-6, -11}, {-5, -11}, {-4, -11}, {-3, -10}, {-2, -10}, {-1, -10}, {0, -9}, {1, -9}, {2, -9}, {3, -9}, {4, -8}, {5, -8}, {6, -8}, {7, -7}, {8, -7}, {-7, -11}, {-6, -10}, {-5, -10}, {-4, -10}, {-3, -9}
TPoint {-2, -9}, {-1, -9}, {0, -9}, {1, -8}, {2, -8}, {2, -8}, {3, -7}, {4, -7}, {5, -7}, {6, -6}, {7, -6}, {-7, -10}, {-6, -9}, {-5, -9}, {-4, -9}, {-4, -9}, {-3, -8}, {-2, -8}, {-1, -8}, {0, -7}, {1, -7}, {2, -7}, {3, -6}, {4, -6}, {5, -6}, {6, -5}, {7, -5}, {-8, -9}, {-7, -8}, {-6, -8}, {-5, -8}, {-4, -8}, {-3, -7}, {-2, -7}, {-1, -7}, {0, -6}, {1, -6}, {2, -6}, {3, -5}, {4, -5}, {5, -5}
TPoint {6, -4}, {7, -4}, {-3, -6}, {-2, -6}, {-1, -6}, {0, -5}, {1, -5}, {2, -5}, {2, -4}, {-4, -5}, {-3, -5}, {-2, -5}, {-1, -4}, {0, -4}, {1, -4}, {2, -3}, {-4, -4}, {-3, -4}, {-2, -4}, {-1, -3}, {0, -3}, {1, -3}, {2, -3}, {-4, -3}, {-3, -3}, {-2, -3}, {-1, -3}, {0, -2}, {1, -2}, {2, -2}, {-4, -2}, {-3, -2}, {-3, -2}, {-2, -2}, {-1, -1}, {0, -1}, {1, -1}, {2, 0}, {3, 0}, {4, 0}, {5, 1}
TPoint {6, 1}, {7, 1}, {8, 2}, {9, 2}, {10, 2}, {-5, -2}, {-4, -1}, {-3, -1}, {-2, -1}, {-1, 0}, {0, 0}, {1, 0}, {2, 1}, {3, 1}, {4, 1}, {5, 2}, {6, 2}, {7, 2}, {8, 2}, {9, 3}, {10, 3}, {-5, -1}, {-4, 0}, {-3, 0}, {-2, 0}, {-1, 1}, {0, 1}, {1, 1}, {2, 2}, {3, 2}, {3, 2}, {4, 2}, {5, 3}, {6, 3}, {7, 3}, {8, 4}, {9, 4}, {-5, 0}, {-4, 1}, {-3, 1}, {-3, 1}, {-2, 2}, {-1, 2}, {0, 2}, {-6, 1}
TPoint {-5, 2}, {-4, 2}, {-3, 2}, {-2, 3}, {-1, 3}, {0, 3}, {-6, 2}, {-5, 3}, {-4, 3}, {-3, 3}, {-2, 3}, {-1, 4}, {0, 4}, {-6, 3}, {-5, 4}, {-4, 4}, {-3, 4}, {-2, 4}, {-2, 5}, {-1, 5}, {-11, 3}, {-10, 3}, {-9, 3}, {-9, 4}, {-8, 4}, {-7, 4}, {-6, 4}, {-5, 5}, {-4, 5}, {-3, 5}, {-2, 6}, {-1, 6}, {0, 6}, {1, 7}, {2, 7}, {3, 7}, {-12, 4}, {-11, 4}, {-10, 4}, {-9, 4}, {-8, 5}, {-7, 5}, {-6, 5}
TPoint {-5, 6}, {-4, 6}, {-3, 6}, {-2, 7}, {-1, 7}, {0, 7}, {1, 8}, {2, 8}, {3, 8}, {-12, 5}, {-11, 5}, {-10, 5}, {-9, 5}, {-8, 6}, {-7, 6}, {-6, 6}, {-5, 7}, {-4, 7}, {-3, 7}, {-2, 8}, {-2, 8}, {-1, 8}, {0, 9}, {1, 9}, {2, 9}, {-12, 5}, {-11, 6}, {-10, 6}, {-9, 6}, {-8, 7}, {-8, 7}, {-7, 7}, {-6, 8}, {-5, 8}, {-4, 8}, {-3, 9}, {-2, 9}, {-1, 9}, {0, 9}, {1, 10}, {2, 10}, {-13, 6}, {-12, 7}
TPoint {-11, 7}, {-10, 7}, {-9, 8}, {-8, 8}, {-7, 8}, {-6, 9}, {-5, 9}, {-4, 9}, {-3, 10}, {-2, 10}, {-1, 10}, {0, 10}, {1, 11}
state1DrawEnd TPoint {2, 11}
state1BarrelEdge TPoint {10, 3}
state1Rectangle RECT {-13, -13, 10, 11}
state1LeftRightStart TPoint {-6, -13}, {-6, -13}, {-7, -12}, {-4, -12}, {-7, -11}, {-1, -11}, {-7, -10}, {3, -10}, {-8, -9}, {6, -9}, {-7, -8}, {8, -8}, {-3, -7}, {8, -7}, {-3, -6}, {7, -6}, {-4, -5}, {7, -5}, {-4, -4}, {7, -4}, {-4, -3}, {2, -3}, {-5, -2}, {2, -2}, {-5, -1}, {1, -1}, {-5, 0}, {4, 0}, {-6, 1}, {7, 1}, {-6, 2}, {10, 2}, {-11, 3}, {10, 3}, {-12, 4}, {9, 4}, {-12, 5}, {-1, 5}
TPoint {-13, 6}, {0, 6}, {-12, 7}, {3, 7}, {-9, 8}, {3, 8}, {-6, 9}, {2, 9}, {-3, 10}, {2, 10}, {1, 11}
state1LeftRightEnd TPoint {2, 11}

state2DrawStart TPoint {-2, -14}, {-1, -13}, {-1, -13}, {0, -12}, {1, -12}, {2, -11}, {3, -10}, {3, -10}, {4, -9}, {5, -9}, {6, -8}, {7, -8}, {7, -7}, {8, -6}, {9, -6}, {10, -5}, {-3, -13}, {-2, -13}, {-1, -12}, {0, -11}, {0, -11}, {1, -10}, {2, -10}, {3, -9}, {4, -8}, {4, -8}, {5, -7}, {6, -7}, {7, -6}, {8, -6}, {9, -5}, {9, -4}, {-3, -12}, {-3, -12}, {-2, -11}, {-1, -11}, {0, -10}, {1, -9}
TPoint {1, -9}, {2, -8}, {3, -8}, {4, -7}, {5, -6}, {6, -6}, {6, -5}, {7, -5}, {8, -4}, {9, -4}, {-4, -12}, {-3, -11}, {-2, -10}, {-2, -10}, {-1, -9}, {0, -9}, {1, -8}, {2, -7}, {2, -7}, {3, -6}, {4, -6}, {5, -5}, {6, -4}, {7, -4}, {7, -3}, {8, -3}, {-5, -11}, {-4, -10}, {-3, -10}, {-2, -9}, {-1, -8}, {-1, -8}, {0, -7}, {1, -7}, {2, -6}, {3, -5}, {4, -5}, {4, -4}, {5, -4}, {6, -3}, {7, -3}
TPoint {8, -2}, {-1, -7}, {0, -6}, {1, -6}, {1, -5}, {2, -5}, {3, -4}, {4, -3}, {-2, -6}, {-1, -6}, {0, -5}, {1, -4}, {2, -4}, {2, -3}, {3, -3}, {-2, -5}, {-1, -5}, {-1, -4}, {0, -4}, {1, -3}, {2, -2}, {3, -2}, {-3, -5}, {-2, -4}, {-1, -3}, {0, -3}, {0, -2}, {1, -2}, {2, -1}, {-3, -4}, {-3, -3}, {-2, -3}, {-1, -2}, {0, -1}, {1, -1}, {1, 0}, {2, 0}, {3, 1}, {4, 2}, {5, 2}, {5, 3}, {6, 3}, {7, 4}
TPoint {8, 4}, {9, 5}, {-4, -3}, {-3, -2}, {-2, -2}, {-2, -1}, {-1, -1}, {0, 0}, {1, 1}, {2, 1}, {2, 2}, {3, 2}, {4, 3}, {5, 4}, {6, 4}, {6, 5}, {7, 5}, {8, 6}, {-5, -2}, {-4, -2}, {-3, -1}, {-2, 0}, {-1, 0}, {-1, 1}, {0, 1}, {1, 2}, {2, 3}, {3, 3}, {3, 4}, {4, 4}, {5, 5}, {6, 6}, {7, 6}, {8, 7}, {-5, -1}, {-4, -1}, {-4, 0}, {-3, 0}, {-2, 1}, {-1, 2}, {0, 2}, {-6, -1}, {-5, 0}, {-4, 1}, {-3, 1}
TPoint {-3, 2}, {-2, 2}, {-1, 3}, {-6, 0}, {-6, 1}, {-5, 1}, {-4, 2}, {-3, 3}, {-2, 3}, {-2, 4}, {-7, 1}, {-6, 2}, {-5, 2}, {-5, 3}, {-4, 3}, {-3, 4}, {-2, 5}, {-12, -1}, {-11, 0}, {-10, 0}, {-9, 1}, {-8, 1}, {-8, 2}, {-7, 3}, {-6, 3}, {-5, 4}, {-4, 4}, {-4, 5}, {-3, 5}, {-2, 6}, {-1, 7}, {0, 7}, {1, 8}, {-12, 0}, {-11, 0}, {-11, 1}, {-10, 2}, {-9, 2}, {-8, 3}, {-7, 3}, {-7, 4}, {-6, 4}
TPoint {-5, 5}, {-4, 6}, {-3, 6}, {-2, 7}, {-2, 7}, {-1, 8}, {0, 9}, {-13, 1}, {-12, 1}, {-11, 2}, {-10, 2}, {-10, 3}, {-9, 4}, {-8, 4}, {-7, 5}, {-6, 5}, {-6, 6}, {-5, 6}, {-4, 7}, {-3, 8}, {-2, 8}, {-1, 9}, {-1, 9}, {-13, 1}, {-13, 2}, {-12, 3}, {-11, 3}, {-10, 4}, {-9, 4}, {-9, 5}, {-8, 6}, {-7, 6}, {-6, 7}, {-5, 7}, {-4, 8}, {-4, 8}, {-3, 9}, {-2, 10}, {-1, 10}, {-14, 2}, {-13, 3}, {-12, 3}
TPoint {-12, 4}, {-11, 5}, {-10, 5}, {-9, 6}, {-8, 6}, {-7, 7}, {-7, 8}, {-6, 8}, {-5, 9}, {-4, 9}, {-3, 10}, {-3, 10}
state2DrawEnd TPoint {-2, 11}
state2BarrelEdge TPoint {8, 6}
state2Rectangle RECT {-14, -14, 10, 11}
state2LeftRightStart TPoint {-2, -14}, {-2, -14}, {-3, -13}, {-1, -13}, {-4, -12}, {1, -12}, {-5, -11}, {2, -11}, {-4, -10}, {3, -10}, {-2, -9}, {5, -9}, {1, -8}, {7, -8}, {0, -7}, {7, -7}, {-2, -6}, {9, -6}, {-3, -5}, {10, -5}, {-3, -4}, {9, -4}, {-4, -3}, {8, -3}, {-5, -2}, {8, -2}, {-12, -1}, {2, -1}, {-12, 0}, {2, 0}, {-13, 1}, {3, 1}, {-14, 2}, {5, 2}, {-13, 3}, {6, 3}, {-12, 4}, {8, 4}
TPoint {-11, 5}, {9, 5}, {-9, 6}, {8, 6}, {-7, 7}, {8, 7}, {-7, 8}, {1, 8}, {-5, 9}, {0, 9}, {-3, 10}, {-1, 10}, {-2, 11}
state2LeftRightEnd TPoint {-2, 11}

state3DrawStart TPoint {2, -14}, {3, -13}, {3, -12}, {4, -12}, {5, -11}, {5, -10}, {6, -9}, {6, -8}, {7, -7}, {8, -7}, {8, -6}, {9, -5}, {9, -4}, {10, -3}, {10, -3}, {11, -2}, {1, -13}, {2, -13}, {3, -12}, {3, -11}, {4, -10}, {4, -9}, {5, -9}, {6, -8}, {6, -7}, {7, -6}, {7, -5}, {8, -4}, {8, -4}, {9, -3}, {10, -2}, {10, -1}, {1, -13}, {1, -12}, {2, -11}, {2, -10}, {3, -10}, {4, -9}, {4, -8}
TPoint {5, -7}, {5, -6}, {6, -6}, {6, -5}, {7, -4}, {8, -3}, {8, -2}, {9, -1}, {9, -1}, {0, -12}, {0, -11}, {1, -11}, {2, -10}, {2, -9}, {3, -8}, {3, -7}, {4, -7}, {4, -6}, {5, -5}, {6, -4}, {6, -3}, {7, -2}, {7, -2}, {8, -1}, {9, 0}, {-1, -12}, {0, -11}, {0, -10}, {1, -9}, {1, -8}, {2, -8}, {3, -7}, {3, -6}, {4, -5}, {4, -4}, {5, -4}, {5, -3}, {6, -2}, {7, -1}, {7, 0}, {8, 1}, {1, -7}, {2, -6}
TPoint {2, -5}, {3, -5}, {3, -4}, {4, -3}, {5, -2}, {0, -6}, {1, -6}, {1, -5}, {2, -4}, {3, -3}, {3, -2}, {4, -2}, {-1, -6}, {0, -5}, {1, -4}, {1, -3}, {2, -3}, {2, -2}, {3, -1}, {-1, -5}, {-1, -4}, {0, -4}, {0, -3}, {1, -2}, {2, -1}, {2, 0}, {-2, -5}, {-2, -4}, {-1, -3}, {0, -2}, {0, -1}, {1, -1}, {1, 0}, {2, 1}, {3, 2}, {3, 3}, {4, 3}, {4, 4}, {5, 5}, {6, 6}, {6, 7}, {7, 8}, {-3, -4}
TPoint {-2, -3}, {-2, -2}, {-1, -2}, {-1, -1}, {0, 0}, {1, 1}, {1, 2}, {2, 2}, {2, 3}, {3, 4}, {4, 5}, {4, 6}, {5, 6}, {5, 7}, {6, 8}, {-4, -3}, {-3, -3}, {-3, -2}, {-2, -1}, {-1, 0}, {-1, 1}, {0, 1}, {0, 2}, {1, 3}, {2, 4}, {2, 5}, {3, 5}, {3, 6}, {4, 7}, {4, 8}, {5, 9}, {-5, -3}, {-4, -2}, {-3, -1}, {-3, 0}, {-2, 0}, {-2, 1}, {-1, 2}, {-5, -2}, {-5, -1}, {-4, -1}, {-4, 0}, {-3, 1}, {-2, 2}
TPoint {-2, 3}, {-6, -2}, {-6, -1}, {-5, 0}, {-4, 1}, {-4, 2}, {-3, 2}, {-3, 3}, {-7, -1}, {-6, 0}, {-6, 1}, {-5, 1}, {-5, 2}, {-4, 3}, {-3, 4}, {-11, -5}, {-10, -4}, {-10, -3}, {-9, -2}, {-8, -1}, {-8, -1}, {-7, 0}, {-7, 1}, {-6, 2}, {-5, 3}, {-5, 4}, {-4, 4}, {-4, 5}, {-3, 6}, {-3, 7}, {-2, 8}, {-12, -4}, {-11, -3}, {-10, -2}, {-10, -2}, {-9, -1}, {-9, 0}, {-8, 1}, {-7, 2}, {-7, 2}, {-6, 3}
TPoint {-6, 4}, {-5, 5}, {-4, 6}, {-4, 7}, {-3, 7}, {-3, 8}, {-12, -3}, {-12, -3}, {-11, -2}, {-11, -1}, {-10, 0}, {-9, 1}, {-9, 1}, {-8, 2}, {-8, 3}, {-7, 4}, {-6, 5}, {-6, 6}, {-5, 6}, {-5, 7}, {-4, 8}, {-4, 9}, {-13, -3}, {-13, -2}, {-12, -1}, {-11, 0}, {-11, 0}, {-10, 1}, {-10, 2}, {-9, 3}, {-8, 4}, {-8, 4}, {-7, 5}, {-7, 6}, {-6, 7}, {-6, 8}, {-5, 9}, {-4, 9}, {-14, -2}, {-13, -1}
TPoint {-13, -1}, {-12, 0}, {-12, 1}, {-11, 2}, {-10, 3}, {-10, 3}, {-9, 4}, {-9, 5}, {-8, 6}, {-8, 7}, {-7, 7}, {-6, 8}, {-6, 9}
state3DrawEnd TPoint {-5, 10}
state3BarrelEdge TPoint {6, 8}
state3Rectangle RECT {-14, -14, 11, 10}
state3LeftRightStart TPoint {2, -14}, {2, -14}, {1, -13}, {3, -13}, {0, -12}, {4, -12}, {0, -11}, {5, -11}, {0, -10}, {5, -10}, {1, -9}, {6, -9}, {1, -8}, {6, -8}, {1, -7}, {8, -7}, {0, -6}, {8, -6}, {-11, -5}, {9, -5}, {-12, -4}, {9, -4}, {-13, -3}, {10, -3}, {-14, -2}, {11, -2}, {-13, -1}, {10, -1}, {-12, 0}, {9, 0}, {-12, 1}, {8, 1}, {-11, 2}, {3, 2}, {-10, 3}, {4, 3}, {-9, 4}, {4, 4}
TPoint {-9, 5}, {5, 5}, {-8, 6}, {6, 6}, {-8, 7}, {6, 7}, {-6, 8}, {7, 8}, {-6, 9}, {5, 9}, {-5, 10}
state3LeftRightEnd TPoint {-5, 10}

state4DrawStart TPoint {6, -13}, {7, -12}, {7, -11}, {7, -10}, {8, -9}, {8, -8}, {8, -7}, {9, -6}, {9, -5}, {9, -4}, {10, -3}, {10, -2}, {10, -1}, {10, 0}, {11, 1}, {11, 2}, {5, -12}, {6, -11}, {6, -10}, {6, -9}, {7, -8}, {7, -8}, {7, -7}, {8, -6}, {8, -5}, {8, -4}, {9, -3}, {9, -2}, {9, -1}, {9, 0}, {10, 1}, {10, 2}, {5, -12}, {5, -11}, {5, -10}, {5, -9}, {6, -8}, {6, -7}, {6, -6}, {7, -5}
TPoint {7, -4}, {7, -3}, {8, -2}, {8, -2}, {8, -1}, {9, 0}, {9, 1}, {9, 2}, {4, -12}, {4, -11}, {4, -10}, {4, -9}, {5, -8}, {5, -7}, {5, -6}, {6, -5}, {6, -4}, {6, -3}, {7, -2}, {7, -1}, {7, 0}, {8, 1}, {8, 2}, {8, 3}, {3, -11}, {3, -10}, {3, -9}, {4, -9}, {4, -8}, {4, -7}, {4, -6}, {5, -5}, {5, -4}, {5, -3}, {6, -2}, {6, -1}, {6, 0}, {7, 1}, {7, 2}, {7, 3}, {3, -6}, {4, -5}, {4, -4}, {4, -3}
TPoint {4, -2}, {5, -2}, {5, -1}, {2, -6}, {3, -5}, {3, -4}, {3, -3}, {3, -2}, {4, -1}, {4, 0}, {1, -6}, {2, -5}, {2, -4}, {2, -3}, {3, -2}, {3, -1}, {3, 0}, {0, -5}, {1, -4}, {1, -3}, {1, -3}, {2, -2}, {2, -1}, {2, 0}, {-1, -5}, {0, -4}, {0, -3}, {0, -2}, {1, -1}, {1, 0}, {1, 1}, {2, 2}, {2, 3}, {2, 3}, {2, 4}, {3, 5}, {3, 6}, {3, 7}, {4, 8}, {4, 9}, {-2, -5}, {-1, -4}, {-1, -3}, {-1, -2}
TPoint {0, -1}, {0, 0}, {0, 1}, {1, 2}, {1, 3}, {1, 4}, {2, 5}, {2, 6}, {2, 7}, {2, 8}, {3, 9}, {3, 10}, {-2, -4}, {-2, -3}, {-2, -3}, {-2, -2}, {-1, -1}, {-1, 0}, {-1, 1}, {0, 2}, {0, 3}, {0, 4}, {1, 5}, {1, 6}, {1, 7}, {2, 8}, {2, 9}, {2, 10}, {-3, -4}, {-3, -3}, {-3, -2}, {-3, -1}, {-2, 0}, {-2, 1}, {-2, 2}, {-4, -4}, {-4, -3}, {-4, -2}, {-3, -1}, {-3, 0}, {-3, 1}, {-3, 2}, {-5, -4}
TPoint {-5, -3}, {-5, -2}, {-4, -1}, {-4, 0}, {-4, 1}, {-3, 2}, {-6, -3}, {-6, -2}, {-6, -1}, {-5, 0}, {-5, 1}, {-5, 2}, {-4, 2}, {-9, -8}, {-8, -7}, {-8, -6}, {-8, -5}, {-8, -4}, {-7, -3}, {-7, -2}, {-7, -1}, {-6, 0}, {-6, 1}, {-6, 2}, {-5, 3}, {-5, 4}, {-5, 5}, {-4, 6}, {-4, 7}, {-10, -7}, {-9, -6}, {-9, -5}, {-9, -4}, {-9, -4}, {-8, -3}, {-8, -2}, {-8, -1}, {-7, 0}, {-7, 1}, {-7, 2}, {-6, 3}
TPoint {-6, 4}, {-6, 5}, {-5, 6}, {-5, 7}, {-11, -7}, {-10, -6}, {-10, -5}, {-10, -4}, {-9, -3}, {-9, -2}, {-9, -1}, {-9, 0}, {-8, 1}, {-8, 2}, {-8, 2}, {-7, 3}, {-7, 4}, {-7, 5}, {-6, 6}, {-6, 7}, {-12, -7}, {-11, -6}, {-11, -5}, {-11, -4}, {-10, -3}, {-10, -2}, {-10, -1}, {-9, 0}, {-9, 1}, {-9, 2}, {-9, 3}, {-8, 4}, {-8, 5}, {-8, 6}, {-7, 7}, {-7, 8}, {-13, -6}, {-12, -5}, {-12, -5}
TPoint {-12, -4}, {-11, -3}, {-11, -2}, {-11, -1}, {-10, 0}, {-10, 1}, {-10, 2}, {-10, 3}, {-9, 4}, {-9, 5}, {-9, 6}, {-8, 7}
state4DrawEnd TPoint {-8, 8}
state4BarrelEdge TPoint {3, 10}
state4Rectangle RECT {-13, -13, 11, 10}
state4LeftRightStart TPoint {6, -13}, {6, -13}, {4, -12}, {7, -12}, {3, -11}, {7, -11}, {3, -10}, {7, -10}, {3, -9}, {8, -9}, {-9, -8}, {8, -8}, {-12, -7}, {8, -7}, {-13, -6}, {9, -6}, {-12, -5}, {9, -5}, {-12, -4}, {9, -4}, {-11, -3}, {10, -3}, {-11, -2}, {10, -2}, {-11, -1}, {10, -1}, {-10, 0}, {10, 0}, {-10, 1}, {11, 1}, {-10, 2}, {11, 2}, {-10, 3}, {8, 3}, {-9, 4}, {2, 4}, {-9, 5}, {3, 5}
TPoint {-9, 6}, {3, 6}, {-8, 7}, {3, 7}, {-8, 8}, {4, 8}, {2, 9}, {4, 9}, {2, 10}
state4LeftRightEnd TPoint {3, 10}

state5DrawStart TPoint {10, -10}, {10, -9}, {10, -8}, {10, -7}, {10, -6}, {10, -5}, {10, -4}, {10, -3}, {10, -2}, {10, -1}, {10, 0}, {10, 1}, {10, 2}, {10, 3}, {10, 4}, {10, 5}, {9, -10}, {9, -9}, {9, -8}, {9, -7}, {9, -6}, {9, -5}, {9, -4}, {9, -3}, {9, -2}, {9, -1}, {9, 0}, {9, 1}, {9, 2}, {9, 3}, {9, 4}, {9, 5}, {8, -10}, {8, -9}, {8, -8}, {8, -7}, {8, -6}, {8, -5}, {8, -4}, {8, -3}, {8, -2}
TPoint {8, -1}, {8, 0}, {8, 1}, {8, 2}, {8, 3}, {8, 4}, {8, 5}, {7, -10}, {7, -9}, {7, -8}, {7, -7}, {7, -6}, {7, -5}, {7, -4}, {7, -3}, {7, -2}, {7, -1}, {7, 0}, {7, 1}, {7, 2}, {7, 3}, {7, 4}, {7, 5}, {6, -10}, {6, -9}, {6, -8}, {6, -7}, {6, -6}, {6, -5}, {6, -4}, {6, -3}, {6, -2}, {6, -1}, {6, 0}, {6, 1}, {6, 2}, {6, 3}, {6, 4}, {6, 5}, {5, -5}, {5, -4}, {5, -3}, {5, -2}, {5, -1}, {5, 0}
TPoint {5, 1}, {4, -5}, {4, -4}, {4, -3}, {4, -2}, {4, -1}, {4, 0}, {4, 1}, {3, -5}, {3, -4}, {3, -3}, {3, -2}, {3, -1}, {3, 0}, {3, 1}, {2, -5}, {2, -4}, {2, -3}, {2, -2}, {2, -1}, {2, 0}, {2, 1}, {1, -5}, {1, -4}, {1, -3}, {1, -2}, {1, -1}, {1, 0}, {1, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 8}, {1, 9}, {1, 10}, {0, -5}, {0, -4}, {0, -3}, {0, -2}, {0, -1}, {0, 0}, {0, 1}
TPoint {0, 2}, {0, 3}, {0, 4}, {0, 5}, {0, 6}, {0, 7}, {0, 8}, {0, 9}, {0, 10}, {-1, -5}, {-1, -4}, {-1, -3}, {-1, -2}, {-1, -1}, {-1, 0}, {-1, 1}, {-1, 2}, {-1, 3}, {-1, 4}, {-1, 5}, {-1, 6}, {-1, 7}, {-1, 8}, {-1, 9}, {-1, 10}, {-2, -5}, {-2, -4}, {-2, -3}, {-2, -2}, {-2, -1}, {-2, 0}, {-2, 1}, {-3, -5}, {-3, -4}, {-3, -3}, {-3, -2}, {-3, -1}, {-3, 0}, {-3, 1}, {-4, -5}, {-4, -4}, {-4, -3}
TPoint {-4, -2}, {-4, -1}, {-4, 0}, {-4, 1}, {-5, -5}, {-5, -4}, {-5, -3}, {-5, -2}, {-5, -1}, {-5, 0}, {-5, 1}, {-6, -10}, {-6, -9}, {-6, -8}, {-6, -7}, {-6, -6}, {-6, -5}, {-6, -4}, {-6, -3}, {-6, -2}, {-6, -1}, {-6, 0}, {-6, 1}, {-6, 2}, {-6, 3}, {-6, 4}, {-6, 5}, {-7, -10}, {-7, -9}, {-7, -8}, {-7, -7}, {-7, -6}, {-7, -5}, {-7, -4}, {-7, -3}, {-7, -2}, {-7, -1}, {-7, 0}, {-7, 1}, {-7, 2}
TPoint {-7, 3}, {-7, 4}, {-7, 5}, {-8, -10}, {-8, -9}, {-8, -8}, {-8, -7}, {-8, -6}, {-8, -5}, {-8, -4}, {-8, -3}, {-8, -2}, {-8, -1}, {-8, 0}, {-8, 1}, {-8, 2}, {-8, 3}, {-8, 4}, {-8, 5}, {-9, -10}, {-9, -9}, {-9, -8}, {-9, -7}, {-9, -6}, {-9, -5}, {-9, -4}, {-9, -3}, {-9, -2}, {-9, -1}, {-9, 0}, {-9, 1}, {-9, 2}, {-9, 3}, {-9, 4}, {-9, 5}, {-10, -10}, {-10, -9}, {-10, -8}, {-10, -7}
TPoint {-10, -6}, {-10, -5}, {-10, -4}, {-10, -3}, {-10, -2}, {-10, -1}, {-10, 0}, {-10, 1}, {-10, 2}, {-10, 3}, {-10, 4}
state5DrawEnd TPoint {-10, 5}
state5BarrelEdge TPoint {0, 10}
state5Rectangle RECT {-10, -10, 10, 10}
state5LeftRightStart TPoint {-10, -10}, {10, -10}, {-10, -9}, {10, -9}, {-10, -8}, {10, -8}, {-10, -7}, {10, -7}, {-10, -6}, {10, -6}, {-10, -5}, {10, -5}, {-10, -4}, {10, -4}, {-10, -3}, {10, -3}, {-10, -2}, {10, -2}, {-10, -1}, {10, -1}, {-10, 0}, {10, 0}, {-10, 1}, {10, 1}, {-10, 2}, {10, 2}, {-10, 3}, {10, 3}, {-10, 4}, {10, 4}, {-10, 5}, {10, 5}, {0, 6}, {1, 6}, {0, 7}, {1, 7}, {0, 8}
TPoint {1, 8}, {0, 9}, {1, 9}, {0, 10}
state5LeftRightEnd TPoint {1, 10}

state6DrawStart TPoint {13, -6}, {12, -5}, {12, -5}, {12, -4}, {11, -3}, {11, -2}, {11, -1}, {10, 0}, {10, 1}, {10, 2}, {10, 3}, {9, 4}, {9, 5}, {9, 6}, {8, 7}, {8, 8}, {12, -7}, {11, -6}, {11, -5}, {11, -4}, {10, -3}, {10, -2}, {10, -1}, {9, 0}, {9, 1}, {9, 2}, {9, 3}, {8, 4}, {8, 5}, {8, 6}, {7, 7}, {7, 8}, {11, -7}, {10, -6}, {10, -5}, {10, -4}, {9, -3}, {9, -2}, {9, -1}, {9, 0}, {8, 1}
TPoint {8, 2}, {8, 2}, {7, 3}, {7, 4}, {7, 5}, {6, 6}, {6, 7}, {10, -7}, {9, -6}, {9, -5}, {9, -4}, {9, -4}, {8, -3}, {8, -2}, {8, -1}, {7, 0}, {7, 1}, {7, 2}, {6, 3}, {6, 4}, {6, 5}, {5, 6}, {5, 7}, {9, -8}, {8, -7}, {8, -6}, {8, -5}, {8, -4}, {7, -3}, {7, -2}, {7, -1}, {6, 0}, {6, 1}, {6, 2}, {5, 3}, {5, 4}, {5, 5}, {4, 6}, {4, 7}, {6, -3}, {6, -2}, {6, -1}, {5, 0}, {5, 1}, {5, 2}, {4, 2}
TPoint {5, -4}, {5, -3}, {5, -2}, {4, -1}, {4, 0}, {4, 1}, {3, 2}, {4, -4}, {4, -3}, {4, -2}, {3, -1}, {3, 0}, {3, 1}, {3, 2}, {3, -4}, {3, -3}, {3, -2}, {3, -1}, {2, 0}, {2, 1}, {2, 2}, {2, -4}, {2, -3}, {2, -3}, {2, -2}, {1, -1}, {1, 0}, {1, 1}, {0, 2}, {0, 3}, {0, 4}, {-1, 5}, {-1, 6}, {-1, 7}, {-2, 8}, {-2, 9}, {-2, 10}, {2, -5}, {1, -4}, {1, -3}, {1, -2}, {0, -1}, {0, 0}, {0, 1}, {-1, 2}
TPoint {-1, 3}, {-1, 4}, {-2, 5}, {-2, 6}, {-2, 7}, {-2, 8}, {-3, 9}, {-3, 10}, {1, -5}, {0, -4}, {0, -3}, {0, -2}, {-1, -1}, {-1, 0}, {-1, 1}, {-2, 2}, {-2, 3}, {-2, 3}, {-2, 4}, {-3, 5}, {-3, 6}, {-3, 7}, {-4, 8}, {-4, 9}, {0, -5}, {-1, -4}, {-1, -3}, {-1, -3}, {-2, -2}, {-2, -1}, {-2, 0}, {-1, -6}, {-2, -5}, {-2, -4}, {-2, -3}, {-3, -2}, {-3, -1}, {-3, 0}, {-2, -6}, {-3, -5}, {-3, -4}
TPoint {-3, -3}, {-3, -2}, {-4, -1}, {-4, 0}, {-3, -6}, {-4, -5}, {-4, -4}, {-4, -3}, {-4, -2}, {-5, -2}, {-5, -1}, {-3, -11}, {-3, -10}, {-3, -9}, {-4, -9}, {-4, -8}, {-4, -7}, {-4, -6}, {-5, -5}, {-5, -4}, {-5, -3}, {-6, -2}, {-6, -1}, {-6, 0}, {-7, 1}, {-7, 2}, {-7, 3}, {-4, -12}, {-4, -11}, {-4, -10}, {-4, -9}, {-5, -8}, {-5, -7}, {-5, -6}, {-6, -5}, {-6, -4}, {-6, -3}, {-7, -2}, {-7, -1}
TPoint {-7, 0}, {-8, 1}, {-8, 2}, {-8, 3}, {-5, -12}, {-5, -11}, {-5, -10}, {-5, -9}, {-6, -8}, {-6, -7}, {-6, -6}, {-7, -5}, {-7, -4}, {-7, -3}, {-8, -2}, {-8, -2}, {-8, -1}, {-9, 0}, {-9, 1}, {-9, 2}, {-5, -12}, {-6, -11}, {-6, -10}, {-6, -9}, {-7, -8}, {-7, -8}, {-7, -7}, {-8, -6}, {-8, -5}, {-8, -4}, {-9, -3}, {-9, -2}, {-9, -1}, {-9, 0}, {-10, 1}, {-10, 2}, {-6, -13}, {-7, -12}, {-7, -11}
TPoint {-7, -10}, {-8, -9}, {-8, -8}, {-8, -7}, {-9, -6}, {-9, -5}, {-9, -4}, {-10, -3}, {-10, -2}, {-10, -1}, {-10, 0}, {-11, 1}
state6DrawEnd TPoint {-11, 2}
state6BarrelEdge TPoint {-3, 10}
state6Rectangle RECT {-11, -13, 13, 10}
state6LeftRightStart TPoint {-6, -13}, {-6, -13}, {-7, -12}, {-4, -12}, {-7, -11}, {-3, -11}, {-7, -10}, {-3, -10}, {-8, -9}, {-3, -9}, {-8, -8}, {9, -8}, {-8, -7}, {12, -7}, {-9, -6}, {13, -6}, {-9, -5}, {12, -5}, {-9, -4}, {12, -4}, {-10, -3}, {11, -3}, {-10, -2}, {11, -2}, {-10, -1}, {11, -1}, {-10, 0}, {10, 0}, {-11, 1}, {10, 1}, {-11, 2}, {10, 2}, {-8, 3}, {10, 3}, {-2, 4}, {9, 4}, {-3, 5}
TPoint {9, 5}, {-3, 6}, {9, 6}, {-3, 7}, {8, 7}, {-4, 8}, {8, 8}, {-4, 9}, {-2, 9}, {-3, 10}
state6LeftRightEnd TPoint {-2, 10}

state7DrawStart TPoint {14, -2}, {13, -1}, {13, -1}, {12, 0}, {12, 1}, {11, 2}, {10, 3}, {10, 3}, {9, 4}, {9, 5}, {8, 6}, {8, 7}, {7, 7}, {6, 8}, {6, 9}, {5, 10}, {13, -3}, {13, -2}, {12, -1}, {11, 0}, {11, 0}, {10, 1}, {10, 2}, {9, 3}, {8, 4}, {8, 4}, {7, 5}, {7, 6}, {6, 7}, {6, 8}, {5, 9}, {4, 9}, {12, -3}, {12, -3}, {11, -2}, {11, -1}, {10, 0}, {9, 1}, {9, 1}, {8, 2}, {8, 3}, {7, 4}, {6, 5}
TPoint {6, 6}, {5, 6}, {5, 7}, {4, 8}, {4, 9}, {12, -4}, {11, -3}, {10, -2}, {10, -2}, {9, -1}, {9, 0}, {8, 1}, {7, 2}, {7, 2}, {6, 3}, {6, 4}, {5, 5}, {4, 6}, {4, 7}, {3, 7}, {3, 8}, {11, -5}, {10, -4}, {10, -3}, {9, -2}, {8, -1}, {8, -1}, {7, 0}, {7, 1}, {6, 2}, {5, 3}, {5, 4}, {4, 4}, {4, 5}, {3, 6}, {3, 7}, {2, 8}, {7, -1}, {6, 0}, {6, 1}, {5, 1}, {5, 2}, {4, 3}, {3, 4}, {6, -2}, {6, -1}
TPoint {5, 0}, {4, 1}, {4, 2}, {3, 2}, {3, 3}, {5, -2}, {5, -1}, {4, -1}, {4, 0}, {3, 1}, {2, 2}, {2, 3}, {5, -3}, {4, -2}, {3, -1}, {3, 0}, {2, 0}, {2, 1}, {1, 2}, {4, -3}, {3, -3}, {3, -2}, {2, -1}, {1, 0}, {1, 1}, {0, 1}, {0, 2}, {-1, 3}, {-2, 4}, {-2, 5}, {-3, 5}, {-3, 6}, {-4, 7}, {-4, 8}, {-5, 9}, {3, -4}, {2, -3}, {2, -2}, {1, -2}, {1, -1}, {0, 0}, {-1, 1}, {-1, 2}, {-2, 2}, {-2, 3}
TPoint {-3, 4}, {-4, 5}, {-4, 6}, {-5, 6}, {-5, 7}, {-6, 8}, {2, -5}, {2, -4}, {1, -3}, {0, -2}, {0, -1}, {-1, -1}, {-1, 0}, {-2, 1}, {-3, 2}, {-3, 3}, {-4, 3}, {-4, 4}, {-5, 5}, {-6, 6}, {-6, 7}, {-7, 8}, {1, -5}, {1, -4}, {0, -4}, {0, -3}, {-1, -2}, {-2, -1}, {-2, 0}, {1, -6}, {0, -5}, {-1, -4}, {-1, -3}, {-2, -3}, {-2, -2}, {-3, -1}, {0, -6}, {-1, -6}, {-1, -5}, {-2, -4}, {-3, -3}, {-3, -2}
TPoint {-4, -2}, {-1, -7}, {-2, -6}, {-2, -5}, {-3, -5}, {-3, -4}, {-4, -3}, {-5, -2}, {1, -12}, {0, -11}, {0, -10}, {-1, -9}, {-1, -8}, {-2, -8}, {-3, -7}, {-3, -6}, {-4, -5}, {-4, -4}, {-5, -4}, {-5, -3}, {-6, -2}, {-7, -1}, {-7, 0}, {-8, 1}, {0, -12}, {0, -11}, {-1, -11}, {-2, -10}, {-2, -9}, {-3, -8}, {-3, -7}, {-4, -7}, {-4, -6}, {-5, -5}, {-6, -4}, {-6, -3}, {-7, -2}, {-7, -2}, {-8, -1}
TPoint {-9, 0}, {-1, -13}, {-1, -12}, {-2, -11}, {-2, -10}, {-3, -10}, {-4, -9}, {-4, -8}, {-5, -7}, {-5, -6}, {-6, -6}, {-6, -5}, {-7, -4}, {-8, -3}, {-8, -2}, {-9, -1}, {-9, -1}, {-1, -13}, {-2, -13}, {-3, -12}, {-3, -11}, {-4, -10}, {-4, -9}, {-5, -9}, {-6, -8}, {-6, -7}, {-7, -6}, {-7, -5}, {-8, -4}, {-8, -4}, {-9, -3}, {-10, -2}, {-10, -1}, {-2, -14}, {-3, -13}, {-3, -12}, {-4, -12}
TPoint {-5, -11}, {-5, -10}, {-6, -9}, {-6, -8}, {-7, -7}, {-8, -7}, {-8, -6}, {-9, -5}, {-9, -4}, {-10, -3}, {-10, -3}
state7DrawEnd TPoint {-11, -2}
state7BarrelEdge TPoint {-6, 8}
state7Rectangle RECT {-11, -14, 14, 10}
state7LeftRightStart TPoint {-2, -14}, {-2, -14}, {-3, -13}, {-1, -13}, {-4, -12}, {1, -12}, {-5, -11}, {0, -11}, {-5, -10}, {0, -10}, {-6, -9}, {-1, -9}, {-6, -8}, {-1, -8}, {-8, -7}, {-1, -7}, {-8, -6}, {1, -6}, {-9, -5}, {11, -5}, {-9, -4}, {12, -4}, {-10, -3}, {13, -3}, {-11, -2}, {14, -2}, {-10, -1}, {13, -1}, {-9, 0}, {12, 0}, {-8, 1}, {12, 1}, {-3, 2}, {11, 2}, {-4, 3}, {10, 3}, {-4, 4}
TPoint {9, 4}, {-5, 5}, {9, 5}, {-6, 6}, {8, 6}, {-6, 7}, {8, 7}, {-7, 8}, {6, 8}, {-5, 9}, {6, 9}, {5, 10}
state7LeftRightEnd TPoint {5, 10}

state8DrawStart TPoint {14, 2}, {13, 3}, {12, 3}, {12, 4}, {11, 5}, {10, 5}, {9, 6}, {8, 6}, {7, 7}, {7, 8}, {6, 8}, {5, 9}, {4, 9}, {3, 10}, {3, 10}, {2, 11}, {13, 1}, {13, 2}, {12, 3}, {11, 3}, {10, 4}, {9, 4}, {9, 5}, {8, 6}, {7, 6}, {6, 7}, {5, 7}, {4, 8}, {4, 8}, {3, 9}, {2, 10}, {1, 10}, {13, 1}, {12, 1}, {11, 2}, {10, 2}, {10, 3}, {9, 4}, {8, 4}, {7, 5}, {6, 5}, {6, 6}, {5, 6}, {4, 7}
TPoint {3, 8}, {2, 8}, {1, 9}, {1, 9}, {12, 0}, {11, 0}, {11, 1}, {10, 2}, {9, 2}, {8, 3}, {7, 3}, {7, 4}, {6, 4}, {5, 5}, {4, 6}, {3, 6}, {2, 7}, {2, 7}, {1, 8}, {0, 9}, {12, -1}, {11, 0}, {10, 0}, {9, 1}, {8, 1}, {8, 2}, {7, 3}, {6, 3}, {5, 4}, {4, 4}, {4, 5}, {3, 5}, {2, 6}, {1, 7}, {0, 7}, {-1, 8}, {7, 1}, {6, 2}, {5, 2}, {5, 3}, {4, 3}, {3, 4}, {2, 5}, {6, 0}, {6, 1}, {5, 1}, {4, 2}
TPoint {3, 3}, {2, 3}, {2, 4}, {6, -1}, {5, 0}, {4, 1}, {3, 1}, {3, 2}, {2, 2}, {1, 3}, {5, -1}, {4, -1}, {4, 0}, {3, 0}, {2, 1}, {1, 2}, {0, 2}, {5, -2}, {4, -2}, {3, -1}, {2, 0}, {1, 0}, {1, 1}, {0, 1}, {-1, 2}, {-2, 3}, {-3, 3}, {-3, 4}, {-4, 4}, {-5, 5}, {-6, 6}, {-7, 6}, {-8, 7}, {4, -3}, {3, -2}, {2, -2}, {2, -1}, {1, -1}, {0, 0}, {-1, 1}, {-2, 1}, {-2, 2}, {-3, 2}, {-4, 3}, {-5, 4}
TPoint {-6, 4}, {-6, 5}, {-7, 5}, {-8, 6}, {3, -4}, {3, -3}, {2, -3}, {1, -2}, {0, -1}, {-1, -1}, {-1, 0}, {-2, 0}, {-3, 1}, {-4, 2}, {-5, 2}, {-5, 3}, {-6, 3}, {-7, 4}, {-8, 4}, {-9, 5}, {3, -5}, {2, -4}, {1, -3}, {0, -3}, {0, -2}, {-1, -2}, {-2, -1}, {2, -5}, {1, -5}, {1, -4}, {0, -4}, {-1, -3}, {-2, -2}, {-3, -2}, {2, -6}, {1, -6}, {0, -5}, {-1, -4}, {-2, -4}, {-2, -3}, {-3, -3}, {1, -7}
TPoint {0, -6}, {-1, -6}, {-1, -5}, {-2, -5}, {-3, -4}, {-4, -3}, {5, -11}, {4, -10}, {3, -10}, {2, -9}, {1, -8}, {1, -8}, {0, -7}, {-1, -7}, {-2, -6}, {-3, -5}, {-4, -5}, {-4, -4}, {-5, -4}, {-6, -3}, {-7, -3}, {-8, -2}, {4, -12}, {3, -11}, {2, -10}, {2, -10}, {1, -9}, {0, -9}, {-1, -8}, {-2, -7}, {-2, -7}, {-3, -6}, {-4, -6}, {-5, -5}, {-6, -4}, {-7, -4}, {-7, -3}, {-8, -3}, {3, -12}
TPoint {3, -12}, {2, -11}, {1, -11}, {0, -10}, {-1, -9}, {-1, -9}, {-2, -8}, {-3, -8}, {-4, -7}, {-5, -6}, {-6, -6}, {-6, -5}, {-7, -5}, {-8, -4}, {-9, -4}, {3, -13}, {2, -13}, {1, -12}, {0, -11}, {0, -11}, {-1, -10}, {-2, -10}, {-3, -9}, {-4, -8}, {-4, -8}, {-5, -7}, {-6, -7}, {-7, -6}, {-8, -6}, {-9, -5}, {-9, -4}, {2, -14}, {1, -13}, {1, -13}, {0, -12}, {-1, -12}, {-2, -11}, {-3, -10}
TPoint {-3, -10}, {-4, -9}, {-5, -9}, {-6, -8}, {-7, -8}, {-7, -7}, {-8, -6}, {-9, -6}
state8DrawEnd TPoint {-10, -5}
state8BarrelEdge TPoint {-8, 6}
state8Rectangle RECT {-10, -14, 14, 11}
state8LeftRightStart TPoint {2, -14}, {2, -14}, {1, -13}, {3, -13}, {0, -12}, {4, -12}, {-2, -11}, {5, -11}, {-3, -10}, {4, -10}, {-5, -9}, {2, -9}, {-7, -8}, {1, -8}, {-7, -7}, {1, -7}, {-9, -6}, {2, -6}, {-10, -5}, {3, -5}, {-9, -4}, {3, -4}, {-8, -3}, {4, -3}, {-8, -2}, {5, -2}, {-2, -1}, {12, -1}, {-2, 0}, {12, 0}, {-3, 1}, {13, 1}, {-5, 2}, {14, 2}, {-6, 3}, {13, 3}, {-8, 4}, {12, 4}
TPoint {-9, 5}, {11, 5}, {-8, 6}, {9, 6}, {-8, 7}, {7, 7}, {1, 8}, {7, 8}, {0, 9}, {5, 9}, {1, 10}, {3, 10}, {2, 11}
state8LeftRightEnd TPoint {2, 11}

state9DrawStart TPoint {13, 6}, {12, 7}, {11, 7}, {10, 7}, {9, 8}, {8, 8}, {7, 8}, {6, 9}, {5, 9}, {4, 9}, {3, 10}, {2, 10}, {1, 10}, {0, 10}, {-1, 11}, {-2, 11}, {12, 5}, {11, 6}, {10, 6}, {9, 6}, {8, 7}, {8, 7}, {7, 7}, {6, 8}, {5, 8}, {4, 8}, {3, 9}, {2, 9}, {1, 9}, {0, 9}, {-1, 10}, {-2, 10}, {12, 5}, {11, 5}, {10, 5}, {9, 5}, {8, 6}, {7, 6}, {6, 6}, {5, 7}, {4, 7}, {3, 7}, {2, 8}, {2, 8}
TPoint {1, 8}, {0, 9}, {-1, 9}, {-2, 9}, {12, 4}, {11, 4}, {10, 4}, {9, 4}, {8, 5}, {7, 5}, {6, 5}, {5, 6}, {4, 6}, {3, 6}, {2, 7}, {1, 7}, {0, 7}, {-1, 8}, {-2, 8}, {-3, 8}, {11, 3}, {10, 3}, {9, 3}, {9, 4}, {8, 4}, {7, 4}, {6, 4}, {5, 5}, {4, 5}, {3, 5}, {2, 6}, {1, 6}, {0, 6}, {-1, 7}, {-2, 7}, {-3, 7}, {6, 3}, {5, 4}, {4, 4}, {3, 4}, {2, 4}, {2, 5}, {1, 5}, {6, 2}, {5, 3}, {4, 3}, {3, 3}
TPoint {2, 3}, {1, 4}, {0, 4}, {6, 1}, {5, 2}, {4, 2}, {3, 2}, {2, 3}, {1, 3}, {0, 3}, {5, 0}, {4, 1}, {3, 1}, {3, 1}, {2, 2}, {1, 2}, {0, 2}, {5, -1}, {4, 0}, {3, 0}, {2, 0}, {1, 1}, {0, 1}, {-1, 1}, {-2, 2}, {-3, 2}, {-3, 2}, {-4, 2}, {-5, 3}, {-6, 3}, {-7, 3}, {-8, 4}, {-9, 4}, {5, -2}, {4, -1}, {3, -1}, {2, -1}, {1, 0}, {0, 0}, {-1, 0}, {-2, 1}, {-3, 1}, {-4, 1}, {-5, 2}, {-6, 2}, {-7, 2}
TPoint {-8, 2}, {-9, 3}, {-10, 3}, {4, -2}, {3, -2}, {3, -2}, {2, -2}, {1, -1}, {0, -1}, {-1, -1}, {-2, 0}, {-3, 0}, {-4, 0}, {-5, 1}, {-6, 1}, {-7, 1}, {-8, 2}, {-9, 2}, {-10, 2}, {4, -3}, {3, -3}, {2, -3}, {1, -3}, {0, -2}, {-1, -2}, {-2, -2}, {4, -4}, {3, -4}, {2, -4}, {1, -3}, {0, -3}, {-1, -3}, {-2, -3}, {4, -5}, {3, -5}, {2, -5}, {1, -4}, {0, -4}, {-1, -4}, {-2, -3}, {3, -6}, {2, -6}
TPoint {1, -6}, {0, -5}, {-1, -5}, {-2, -5}, {-2, -4}, {8, -9}, {7, -8}, {6, -8}, {5, -8}, {4, -8}, {3, -7}, {2, -7}, {1, -7}, {0, -6}, {-1, -6}, {-2, -6}, {-3, -5}, {-4, -5}, {-5, -5}, {-6, -4}, {-7, -4}, {7, -10}, {6, -9}, {5, -9}, {4, -9}, {4, -9}, {3, -8}, {2, -8}, {1, -8}, {0, -7}, {-1, -7}, {-2, -7}, {-3, -6}, {-4, -6}, {-5, -6}, {-6, -5}, {-7, -5}, {7, -11}, {6, -10}, {5, -10}, {4, -10}
TPoint {3, -9}, {2, -9}, {1, -9}, {0, -9}, {-1, -8}, {-2, -8}, {-2, -8}, {-3, -7}, {-4, -7}, {-5, -7}, {-6, -6}, {-7, -6}, {7, -12}, {6, -11}, {5, -11}, {4, -11}, {3, -10}, {2, -10}, {1, -10}, {0, -9}, {-1, -9}, {-2, -9}, {-3, -9}, {-4, -8}, {-5, -8}, {-6, -8}, {-7, -7}, {-8, -7}, {6, -13}, {5, -12}, {5, -12}, {4, -12}, {3, -11}, {2, -11}, {1, -11}, {0, -10}, {-1, -10}, {-2, -10}, {-3, -10}
TPoint {-4, -9}, {-5, -9}, {-6, -9}, {-7, -8}
state9DrawEnd TPoint {-8, -8}
state9BarrelEdge TPoint {-10, 3}
state9Rectangle RECT {-10, -13, 13, 11}
state9LeftRightStart TPoint {6, -13}, {6, -13}, {4, -12}, {7, -12}, {1, -11}, {7, -11}, {-3, -10}, {7, -10}, {-6, -9}, {8, -9}, {-8, -8}, {7, -8}, {-8, -7}, {3, -7}, {-7, -6}, {3, -6}, {-7, -5}, {4, -5}, {-7, -4}, {4, -4}, {-2, -3}, {4, -3}, {-2, -2}, {5, -2}, {0, -1}, {5, -1}, {-4, 0}, {5, 0}, {-7, 1}, {6, 1}, {-10, 2}, {6, 2}, {-10, 3}, {11, 3}, {-9, 4}, {12, 4}, {1, 5}, {12, 5}, {0, 6}
TPoint {13, 6}, {-3, 7}, {12, 7}, {-3, 8}, {9, 8}, {-2, 9}, {6, 9}, {-2, 10}, {3, 10}, {-2, 11}
state9LeftRightEnd TPoint {-1, 11}

state10DrawStart TPoint {10, 10}, {9, 10}, {8, 10}, {7, 10}, {6, 10}, {5, 10}, {4, 10}, {3, 10}, {2, 10}, {1, 10}, {0, 10}, {-1, 10}, {-2, 10}, {-3, 10}, {-4, 10}, {-5, 10}, {10, 9}, {9, 9}, {8, 9}, {7, 9}, {6, 9}, {5, 9}, {4, 9}, {3, 9}, {2, 9}, {1, 9}, {0, 9}, {-1, 9}, {-2, 9}, {-3, 9}, {-4, 9}, {-5, 9}, {10, 8}, {9, 8}, {8, 8}, {7, 8}, {6, 8}, {5, 8}, {4, 8}, {3, 8}, {2, 8}, {1, 8}, {0, 8}
TPoint {-1, 8}, {-2, 8}, {-3, 8}, {-4, 8}, {-5, 8}, {10, 7}, {9, 7}, {8, 7}, {7, 7}, {6, 7}, {5, 7}, {4, 7}, {3, 7}, {2, 7}, {1, 7}, {0, 7}, {-1, 7}, {-2, 7}, {-3, 7}, {-4, 7}, {-5, 7}, {10, 6}, {9, 6}, {8, 6}, {7, 6}, {6, 6}, {5, 6}, {4, 6}, {3, 6}, {2, 6}, {1, 6}, {0, 6}, {-1, 6}, {-2, 6}, {-3, 6}, {-4, 6}, {-5, 6}, {5, 5}, {4, 5}, {3, 5}, {2, 5}, {1, 5}, {0, 5}, {-1, 5}, {5, 4}, {4, 4}
TPoint {3, 4}, {2, 4}, {1, 4}, {0, 4}, {-1, 4}, {5, 3}, {4, 3}, {3, 3}, {2, 3}, {1, 3}, {0, 3}, {-1, 3}, {5, 2}, {4, 2}, {3, 2}, {2, 2}, {1, 2}, {0, 2}, {-1, 2}, {5, 1}, {4, 1}, {3, 1}, {2, 1}, {1, 1}, {0, 1}, {-1, 1}, {-2, 1}, {-3, 1}, {-4, 1}, {-5, 1}, {-6, 1}, {-7, 1}, {-8, 1}, {-9, 1}, {-10, 1}, {5, 0}, {4, 0}, {3, 0}, {2, 0}, {1, 0}, {0, 0}, {-1, 0}, {-2, 0}, {-3, 0}, {-4, 0}, {-5, 0}
TPoint {-6, 0}, {-7, 0}, {-8, 0}, {-9, 0}, {-10, 0}, {5, -1}, {4, -1}, {3, -1}, {2, -1}, {1, -1}, {0, -1}, {-1, -1}, {-2, -1}, {-3, -1}, {-4, -1}, {-5, -1}, {-6, -1}, {-7, -1}, {-8, -1}, {-9, -1}, {-10, -1}, {5, -2}, {4, -2}, {3, -2}, {2, -2}, {1, -2}, {0, -2}, {-1, -2}, {5, -3}, {4, -3}, {3, -3}, {2, -3}, {1, -3}, {0, -3}, {-1, -3}, {5, -4}, {4, -4}, {3, -4}, {2, -4}, {1, -4}, {0, -4}
TPoint {-1, -4}, {5, -5}, {4, -5}, {3, -5}, {2, -5}, {1, -5}, {0, -5}, {-1, -5}, {10, -6}, {9, -6}, {8, -6}, {7, -6}, {6, -6}, {5, -6}, {4, -6}, {3, -6}, {2, -6}, {1, -6}, {0, -6}, {-1, -6}, {-2, -6}, {-3, -6}, {-4, -6}, {-5, -6}, {10, -7}, {9, -7}, {8, -7}, {7, -7}, {6, -7}, {5, -7}, {4, -7}, {3, -7}, {2, -7}, {1, -7}, {0, -7}, {-1, -7}, {-2, -7}, {-3, -7}, {-4, -7}, {-5, -7}, {10, -8}
TPoint {9, -8}, {8, -8}, {7, -8}, {6, -8}, {5, -8}, {4, -8}, {3, -8}, {2, -8}, {1, -8}, {0, -8}, {-1, -8}, {-2, -8}, {-3, -8}, {-4, -8}, {-5, -8}, {10, -9}, {9, -9}, {8, -9}, {7, -9}, {6, -9}, {5, -9}, {4, -9}, {3, -9}, {2, -9}, {1, -9}, {0, -9}, {-1, -9}, {-2, -9}, {-3, -9}, {-4, -9}, {-5, -9}, {10, -10}, {9, -10}, {8, -10}, {7, -10}, {6, -10}, {5, -10}, {4, -10}, {3, -10}, {2, -10}, {1, -10}
TPoint {0, -10}, {-1, -10}, {-2, -10}, {-3, -10}, {-4, -10}
state10DrawEnd TPoint {-5, -10}
state10BarrelEdge TPoint {-10, 0}
state10Rectangle RECT {-10, -10, 10, 10}
state10LeftRightStart TPoint {-5, -10}, {10, -10}, {-5, -9}, {10, -9}, {-5, -8}, {10, -8}, {-5, -7}, {10, -7}, {-5, -6}, {10, -6}, {0, -5}, {5, -5}, {0, -4}, {5, -4}, {0, -3}, {5, -3}, {0, -2}, {5, -2}, {-10, -1}, {5, -1}, {-10, 0}, {5, 0}, {-10, 1}, {5, 1}, {0, 2}, {5, 2}, {0, 3}, {5, 3}, {0, 4}, {5, 4}, {0, 5}, {5, 5}, {-5, 6}, {10, 6}, {-5, 7}, {10, 7}, {-5, 8}, {10, 8}, {-5, 9}, {10, 9}
TPoint {-5, 10}
state10LeftRightEnd TPoint {10, 10}

state11DrawStart TPoint {6, 13}, {5, 12}, {5, 12}, {4, 12}, {3, 11}, {2, 11}, {1, 11}, {0, 10}, {-1, 10}, {-2, 10}, {-3, 10}, {-4, 9}, {-5, 9}, {-6, 9}, {-7, 8}, {-8, 8}, {7, 12}, {6, 11}, {5, 11}, {4, 11}, {3, 10}, {2, 10}, {1, 10}, {0, 9}, {-1, 9}, {-2, 9}, {-3, 9}, {-4, 8}, {-5, 8}, {-6, 8}, {-7, 7}, {-8, 7}, {7, 11}, {6, 10}, {5, 10}, {4, 10}, {3, 9}, {2, 9}, {1, 9}, {0, 9}, {-1, 8}, {-2, 8}
TPoint {-2, 8}, {-3, 7}, {-4, 7}, {-5, 7}, {-6, 6}, {-7, 6}, {7, 10}, {6, 9}, {5, 9}, {4, 9}, {4, 9}, {3, 8}, {2, 8}, {1, 8}, {0, 7}, {-1, 7}, {-2, 7}, {-3, 6}, {-4, 6}, {-5, 6}, {-6, 5}, {-7, 5}, {8, 9}, {7, 8}, {6, 8}, {5, 8}, {4, 8}, {3, 7}, {2, 7}, {1, 7}, {0, 6}, {-1, 6}, {-2, 6}, {-3, 5}, {-4, 5}, {-5, 5}, {-6, 4}, {-7, 4}, {3, 6}, {2, 6}, {1, 6}, {0, 5}, {-1, 5}, {-2, 5}, {-2, 4}, {4, 5}
TPoint {3, 5}, {2, 5}, {1, 4}, {0, 4}, {-1, 4}, {-2, 3}, {4, 4}, {3, 4}, {2, 4}, {1, 3}, {0, 3}, {-1, 3}, {-2, 3}, {4, 3}, {3, 3}, {2, 3}, {1, 3}, {0, 2}, {-1, 2}, {-2, 2}, {4, 2}, {3, 2}, {3, 2}, {2, 2}, {1, 1}, {0, 1}, {-1, 1}, {-2, 0}, {-3, 0}, {-4, 0}, {-5, -1}, {-6, -1}, {-7, -1}, {-8, -2}, {-9, -2}, {-10, -2}, {5, 2}, {4, 1}, {3, 1}, {2, 1}, {1, 0}, {0, 0}, {-1, 0}, {-2, -1}, {-3, -1}
TPoint {-4, -1}, {-5, -2}, {-6, -2}, {-7, -2}, {-8, -2}, {-9, -3}, {-10, -3}, {5, 1}, {4, 0}, {3, 0}, {2, 0}, {1, -1}, {0, -1}, {-1, -1}, {-2, -2}, {-3, -2}, {-3, -2}, {-4, -2}, {-5, -3}, {-6, -3}, {-7, -3}, {-8, -4}, {-9, -4}, {5, 0}, {4, -1}, {3, -1}, {3, -1}, {2, -2}, {1, -2}, {0, -2}, {6, -1}, {5, -2}, {4, -2}, {3, -2}, {2, -3}, {1, -3}, {0, -3}, {6, -2}, {5, -3}, {4, -3}, {3, -3}, {2, -3}
TPoint {1, -4}, {0, -4}, {6, -3}, {5, -4}, {4, -4}, {3, -4}, {2, -4}, {2, -5}, {1, -5}, {11, -3}, {10, -3}, {9, -3}, {9, -4}, {8, -4}, {7, -4}, {6, -4}, {5, -5}, {4, -5}, {3, -5}, {2, -6}, {1, -6}, {0, -6}, {-1, -7}, {-2, -7}, {-3, -7}, {12, -4}, {11, -4}, {10, -4}, {9, -4}, {8, -5}, {7, -5}, {6, -5}, {5, -6}, {4, -6}, {3, -6}, {2, -7}, {1, -7}, {0, -7}, {-1, -8}, {-2, -8}, {-3, -8}, {12, -5}
TPoint {11, -5}, {10, -5}, {9, -5}, {8, -6}, {7, -6}, {6, -6}, {5, -7}, {4, -7}, {3, -7}, {2, -8}, {2, -8}, {1, -8}, {0, -9}, {-1, -9}, {-2, -9}, {12, -5}, {11, -6}, {10, -6}, {9, -6}, {8, -7}, {8, -7}, {7, -7}, {6, -8}, {5, -8}, {4, -8}, {3, -9}, {2, -9}, {1, -9}, {0, -9}, {-1, -10}, {-2, -10}, {13, -6}, {12, -7}, {11, -7}, {10, -7}, {9, -8}, {8, -8}, {7, -8}, {6, -9}, {5, -9}, {4, -9}
TPoint {3, -10}, {2, -10}, {1, -10}, {0, -10}, {-1, -11}
state11DrawEnd TPoint {-2, -11}
state11BarrelEdge TPoint {-10, -3}
state11Rectangle RECT {-10, -11, 13, 13}
state11LeftRightStart TPoint {-2, -11}, {-1, -11}, {-2, -10}, {3, -10}, {-2, -9}, {6, -9}, {-3, -8}, {9, -8}, {-3, -7}, {12, -7}, {0, -6}, {13, -6}, {1, -5}, {12, -5}, {-9, -4}, {12, -4}, {-10, -3}, {11, -3}, {-10, -2}, {6, -2}, {-7, -1}, {6, -1}, {-4, 0}, {5, 0}, {0, 1}, {5, 1}, {-2, 2}, {5, 2}, {-2, 3}, {4, 3}, {-7, 4}, {4, 4}, {-7, 5}, {4, 5}, {-7, 6}, {3, 6}, {-8, 7}, {3, 7}, {-8, 8}, {7, 8}
TPoint {-6, 9}, {8, 9}, {-3, 10}, {7, 10}, {1, 11}, {7, 11}, {4, 12}, {7, 12}, {6, 13}
state11LeftRightEnd TPoint {6, 13}

state12DrawStart TPoint {2, 14}, {1, 13}, {1, 13}, {0, 12}, {-1, 12}, {-2, 11}, {-3, 10}, {-3, 10}, {-4, 9}, {-5, 9}, {-6, 8}, {-7, 8}, {-7, 7}, {-8, 6}, {-9, 6}, {-10, 5}, {3, 13}, {2, 13}, {1, 12}, {0, 11}, {0, 11}, {-1, 10}, {-2, 10}, {-3, 9}, {-4, 8}, {-4, 8}, {-5, 7}, {-6, 7}, {-7, 6}, {-8, 6}, {-9, 5}, {-9, 4}, {3, 12}, {3, 12}, {2, 11}, {1, 11}, {0, 10}, {-1, 9}, {-1, 9}, {-2, 8}, {-3, 8}
TPoint {-4, 7}, {-5, 6}, {-6, 6}, {-6, 5}, {-7, 5}, {-8, 4}, {-9, 4}, {4, 12}, {3, 11}, {2, 10}, {2, 10}, {1, 9}, {0, 9}, {-1, 8}, {-2, 7}, {-2, 7}, {-3, 6}, {-4, 6}, {-5, 5}, {-6, 4}, {-7, 4}, {-7, 3}, {-8, 3}, {5, 11}, {4, 10}, {3, 10}, {2, 9}, {1, 8}, {1, 8}, {0, 7}, {-1, 7}, {-2, 6}, {-3, 5}, {-4, 5}, {-4, 4}, {-5, 4}, {-6, 3}, {-7, 3}, {-8, 2}, {1, 7}, {0, 6}, {-1, 6}, {-1, 5}, {-2, 5}
TPoint {-3, 4}, {-4, 3}, {2, 6}, {1, 6}, {0, 5}, {-1, 4}, {-2, 4}, {-2, 3}, {-3, 3}, {2, 5}, {1, 5}, {1, 4}, {0, 4}, {-1, 3}, {-2, 2}, {-3, 2}, {3, 5}, {2, 4}, {1, 3}, {0, 3}, {0, 2}, {-1, 2}, {-2, 1}, {3, 4}, {3, 3}, {2, 3}, {1, 2}, {0, 1}, {-1, 1}, {-1, 0}, {-2, 0}, {-3, -1}, {-4, -2}, {-5, -2}, {-5, -3}, {-6, -3}, {-7, -4}, {-8, -4}, {-9, -5}, {4, 3}, {3, 2}, {2, 2}, {2, 1}, {1, 1}, {0, 0}
TPoint {-1, -1}, {-2, -1}, {-2, -2}, {-3, -2}, {-4, -3}, {-5, -4}, {-6, -4}, {-6, -5}, {-7, -5}, {-8, -6}, {5, 2}, {4, 2}, {3, 1}, {2, 0}, {1, 0}, {1, -1}, {0, -1}, {-1, -2}, {-2, -3}, {-3, -3}, {-3, -4}, {-4, -4}, {-5, -5}, {-6, -6}, {-7, -6}, {-8, -7}, {5, 1}, {4, 1}, {4, 0}, {3, 0}, {2, -1}, {1, -2}, {0, -2}, {6, 1}, {5, 0}, {4, -1}, {3, -1}, {3, -2}, {2, -2}, {1, -3}, {6, 0}, {6, -1}
TPoint {5, -1}, {4, -2}, {3, -3}, {2, -3}, {2, -4}, {7, -1}, {6, -2}, {5, -2}, {5, -3}, {4, -3}, {3, -4}, {2, -5}, {12, 1}, {11, 0}, {10, 0}, {9, -1}, {8, -1}, {8, -2}, {7, -3}, {6, -3}, {5, -4}, {4, -4}, {4, -5}, {3, -5}, {2, -6}, {1, -7}, {0, -7}, {-1, -8}, {12, 0}, {11, 0}, {11, -1}, {10, -2}, {9, -2}, {8, -3}, {7, -3}, {7, -4}, {6, -4}, {5, -5}, {4, -6}, {3, -6}, {2, -7}, {2, -7}, {1, -8}
TPoint {0, -9}, {13, -1}, {12, -1}, {11, -2}, {10, -2}, {10, -3}, {9, -4}, {8, -4}, {7, -5}, {6, -5}, {6, -6}, {5, -6}, {4, -7}, {3, -8}, {2, -8}, {1, -9}, {1, -9}, {13, -1}, {13, -2}, {12, -3}, {11, -3}, {10, -4}, {9, -4}, {9, -5}, {8, -6}, {7, -6}, {6, -7}, {5, -7}, {4, -8}, {4, -8}, {3, -9}, {2, -10}, {1, -10}, {14, -2}, {13, -3}, {12, -3}, {12, -4}, {11, -5}, {10, -5}, {9, -6}, {8, -6}
TPoint {7, -7}, {7, -8}, {6, -8}, {5, -9}, {4, -9}, {3, -10}, {3, -10}
state12DrawEnd TPoint {2, -11}
state12BarrelEdge TPoint {-8, -6}
state12Rectangle RECT {-10, -11, 14, 14}
state12LeftRightStart TPoint {2, -11}, {2, -11}, {1, -10}, {3, -10}, {0, -9}, {5, -9}, {1, -8}, {7, -8}, {-8, -7}, {7, -7}, {-8, -6}, {9, -6}, {-9, -5}, {11, -5}, {-8, -4}, {12, -4}, {-6, -3}, {13, -3}, {-5, -2}, {14, -2}, {-3, -1}, {13, -1}, {-2, 0}, {12, 0}, {-2, 1}, {12, 1}, {-8, 2}, {5, 2}, {-8, 3}, {4, 3}, {-9, 4}, {3, 4}, {-10, 5}, {3, 5}, {-9, 6}, {2, 6}, {-7, 7}, {1, 7}, {-7, 8}, {1, 8}
TPoint {-5, 9}, {2, 9}, {-3, 10}, {4, 10}, {-2, 11}, {5, 11}, {0, 12}, {4, 12}, {1, 13}, {3, 13}, {2, 14}
state12LeftRightEnd TPoint {2, 14}

state13DrawStart TPoint {-2, 14}, {-3, 13}, {-3, 12}, {-4, 12}, {-5, 11}, {-5, 10}, {-6, 9}, {-6, 8}, {-7, 7}, {-8, 7}, {-8, 6}, {-9, 5}, {-9, 4}, {-10, 3}, {-10, 3}, {-11, 2}, {-1, 13}, {-2, 13}, {-3, 12}, {-3, 11}, {-4, 10}, {-4, 9}, {-5, 9}, {-6, 8}, {-6, 7}, {-7, 6}, {-7, 5}, {-8, 4}, {-8, 4}, {-9, 3}, {-10, 2}, {-10, 1}, {-1, 13}, {-1, 12}, {-2, 11}, {-2, 10}, {-3, 10}, {-4, 9}, {-4, 8}
TPoint {-5, 7}, {-5, 6}, {-6, 6}, {-6, 5}, {-7, 4}, {-8, 3}, {-8, 2}, {-9, 1}, {-9, 1}, {0, 12}, {0, 11}, {-1, 11}, {-2, 10}, {-2, 9}, {-3, 8}, {-3, 7}, {-4, 7}, {-4, 6}, {-5, 5}, {-6, 4}, {-6, 3}, {-7, 2}, {-7, 2}, {-8, 1}, {-9, 0}, {1, 12}, {0, 11}, {0, 10}, {-1, 9}, {-1, 8}, {-2, 8}, {-3, 7}, {-3, 6}, {-4, 5}, {-4, 4}, {-5, 4}, {-5, 3}, {-6, 2}, {-7, 1}, {-7, 0}, {-8, -1}, {-1, 7}, {-2, 6}
TPoint {-2, 5}, {-3, 5}, {-3, 4}, {-4, 3}, {-5, 2}, {0, 6}, {-1, 6}, {-1, 5}, {-2, 4}, {-3, 3}, {-3, 2}, {-4, 2}, {1, 6}, {0, 5}, {-1, 4}, {-1, 3}, {-2, 3}, {-2, 2}, {-3, 1}, {1, 5}, {1, 4}, {0, 4}, {0, 3}, {-1, 2}, {-2, 1}, {-2, 0}, {2, 5}, {2, 4}, {1, 3}, {0, 2}, {0, 1}, {-1, 1}, {-1, 0}, {-2, -1}, {-3, -2}, {-3, -3}, {-4, -3}, {-4, -4}, {-5, -5}, {-6, -6}, {-6, -7}, {-7, -8}, {3, 4}, {2, 3}
TPoint {2, 2}, {1, 2}, {1, 1}, {0, 0}, {-1, -1}, {-1, -2}, {-2, -2}, {-2, -3}, {-3, -4}, {-4, -5}, {-4, -6}, {-5, -6}, {-5, -7}, {-6, -8}, {4, 3}, {3, 3}, {3, 2}, {2, 1}, {1, 0}, {1, -1}, {0, -1}, {0, -2}, {-1, -3}, {-2, -4}, {-2, -5}, {-3, -5}, {-3, -6}, {-4, -7}, {-4, -8}, {-5, -9}, {5, 3}, {4, 2}, {3, 1}, {3, 0}, {2, 0}, {2, -1}, {1, -2}, {5, 2}, {5, 1}, {4, 1}, {4, 0}, {3, -1}, {2, -2}
TPoint {2, -3}, {6, 2}, {6, 1}, {5, 0}, {4, -1}, {4, -2}, {3, -2}, {3, -3}, {7, 1}, {6, 0}, {6, -1}, {5, -1}, {5, -2}, {4, -3}, {3, -4}, {11, 5}, {10, 4}, {10, 3}, {9, 2}, {8, 1}, {8, 1}, {7, 0}, {7, -1}, {6, -2}, {5, -3}, {5, -4}, {4, -4}, {4, -5}, {3, -6}, {3, -7}, {2, -8}, {12, 4}, {11, 3}, {10, 2}, {10, 2}, {9, 1}, {9, 0}, {8, -1}, {7, -2}, {7, -2}, {6, -3}, {6, -4}, {5, -5}, {4, -6}
TPoint {4, -7}, {3, -7}, {3, -8}, {12, 3}, {12, 3}, {11, 2}, {11, 1}, {10, 0}, {9, -1}, {9, -1}, {8, -2}, {8, -3}, {7, -4}, {6, -5}, {6, -6}, {5, -6}, {5, -7}, {4, -8}, {4, -9}, {13, 3}, {13, 2}, {12, 1}, {11, 0}, {11, 0}, {10, -1}, {10, -2}, {9, -3}, {8, -4}, {8, -4}, {7, -5}, {7, -6}, {6, -7}, {6, -8}, {5, -9}, {4, -9}, {14, 2}, {13, 1}, {13, 1}, {12, 0}, {12, -1}, {11, -2}, {10, -3}
TPoint {10, -3}, {9, -4}, {9, -5}, {8, -6}, {8, -7}, {7, -7}, {6, -8}, {6, -9}
state13DrawEnd TPoint {5, -10}
state13BarrelEdge TPoint {-6, -8}
state13Rectangle RECT {-11, -10, 14, 14}
state13LeftRightStart TPoint {5, -10}, {5, -10}, {-5, -9}, {6, -9}, {-7, -8}, {6, -8}, {-6, -7}, {8, -7}, {-6, -6}, {8, -6}, {-5, -5}, {9, -5}, {-4, -4}, {9, -4}, {-4, -3}, {10, -3}, {-3, -2}, {11, -2}, {-8, -1}, {12, -1}, {-9, 0}, {12, 0}, {-10, 1}, {13, 1}, {-11, 2}, {14, 2}, {-10, 3}, {13, 3}, {-9, 4}, {12, 4}, {-9, 5}, {11, 5}, {-8, 6}, {1, 6}, {-8, 7}, {-1, 7}, {-6, 8}, {-1, 8}, {-6, 9}
TPoint {-1, 9}, {-5, 10}, {0, 10}, {-5, 11}, {0, 11}, {-4, 12}, {1, 12}, {-3, 13}, {-1, 13}, {-2, 14}
state13LeftRightEnd TPoint {-2, 14}

state14DrawStart TPoint {-6, 13}, {-7, 12}, {-7, 11}, {-7, 10}, {-8, 9}, {-8, 8}, {-8, 7}, {-9, 6}, {-9, 5}, {-9, 4}, {-10, 3}, {-10, 2}, {-10, 1}, {-10, 0}, {-11, -1}, {-11, -2}, {-5, 12}, {-6, 11}, {-6, 10}, {-6, 9}, {-7, 8}, {-7, 8}, {-7, 7}, {-8, 6}, {-8, 5}, {-8, 4}, {-9, 3}, {-9, 2}, {-9, 1}, {-9, 0}, {-10, -1}, {-10, -2}, {-5, 12}, {-5, 11}, {-5, 10}, {-5, 9}, {-6, 8}, {-6, 7}, {-6, 6}
TPoint {-7, 5}, {-7, 4}, {-7, 3}, {-8, 2}, {-8, 2}, {-8, 1}, {-9, 0}, {-9, -1}, {-9, -2}, {-4, 12}, {-4, 11}, {-4, 10}, {-4, 9}, {-5, 8}, {-5, 7}, {-5, 6}, {-6, 5}, {-6, 4}, {-6, 3}, {-7, 2}, {-7, 1}, {-7, 0}, {-8, -1}, {-8, -2}, {-8, -3}, {-3, 11}, {-3, 10}, {-3, 9}, {-4, 9}, {-4, 8}, {-4, 7}, {-4, 6}, {-5, 5}, {-5, 4}, {-5, 3}, {-6, 2}, {-6, 1}, {-6, 0}, {-7, -1}, {-7, -2}, {-7, -3}, {-3, 6}
TPoint {-4, 5}, {-4, 4}, {-4, 3}, {-4, 2}, {-5, 2}, {-5, 1}, {-2, 6}, {-3, 5}, {-3, 4}, {-3, 3}, {-3, 2}, {-4, 1}, {-4, 0}, {-1, 6}, {-2, 5}, {-2, 4}, {-2, 3}, {-3, 2}, {-3, 1}, {-3, 0}, {0, 5}, {-1, 4}, {-1, 3}, {-1, 3}, {-2, 2}, {-2, 1}, {-2, 0}, {1, 5}, {0, 4}, {0, 3}, {0, 2}, {-1, 1}, {-1, 0}, {-1, -1}, {-2, -2}, {-2, -3}, {-2, -3}, {-2, -4}, {-3, -5}, {-3, -6}, {-3, -7}, {-4, -8}, {-4, -9}
TPoint {2, 5}, {1, 4}, {1, 3}, {1, 2}, {0, 1}, {0, 0}, {0, -1}, {-1, -2}, {-1, -3}, {-1, -4}, {-2, -5}, {-2, -6}, {-2, -7}, {-2, -8}, {-3, -9}, {-3, -10}, {2, 4}, {2, 3}, {2, 3}, {2, 2}, {1, 1}, {1, 0}, {1, -1}, {0, -2}, {0, -3}, {0, -4}, {-1, -5}, {-1, -6}, {-1, -7}, {-2, -8}, {-2, -9}, {-2, -10}, {3, 4}, {3, 3}, {3, 2}, {3, 1}, {2, 0}, {2, -1}, {2, -2}, {4, 4}, {4, 3}, {4, 2}, {3, 1}, {3, 0}
TPoint {3, -1}, {3, -2}, {5, 4}, {5, 3}, {5, 2}, {4, 1}, {4, 0}, {4, -1}, {3, -2}, {6, 3}, {6, 2}, {6, 1}, {5, 0}, {5, -1}, {5, -2}, {4, -2}, {9, 8}, {8, 7}, {8, 6}, {8, 5}, {8, 4}, {7, 3}, {7, 2}, {7, 1}, {6, 0}, {6, -1}, {6, -2}, {5, -3}, {5, -4}, {5, -5}, {4, -6}, {4, -7}, {10, 7}, {9, 6}, {9, 5}, {9, 4}, {9, 4}, {8, 3}, {8, 2}, {8, 1}, {7, 0}, {7, -1}, {7, -2}, {6, -3}, {6, -4}, {6, -5}
TPoint {5, -6}, {5, -7}, {11, 7}, {10, 6}, {10, 5}, {10, 4}, {9, 3}, {9, 2}, {9, 1}, {9, 0}, {8, -1}, {8, -2}, {8, -2}, {7, -3}, {7, -4}, {7, -5}, {6, -6}, {6, -7}, {12, 7}, {11, 6}, {11, 5}, {11, 4}, {10, 3}, {10, 2}, {10, 1}, {9, 0}, {9, -1}, {9, -2}, {9, -3}, {8, -4}, {8, -5}, {8, -6}, {7, -7}, {7, -8}, {13, 6}, {12, 5}, {12, 5}, {12, 4}, {11, 3}, {11, 2}, {11, 1}, {10, 0}, {10, -1}
TPoint {10, -2}, {10, -3}, {9, -4}, {9, -5}, {9, -6}, {8, -7}
state14DrawEnd TPoint {8, -8}
state14BarrelEdge TPoint {-3, -10}
state14Rectangle RECT {-11, -10, 13, 13}
state14LeftRightStart TPoint {-3, -10}, {-2, -10}, {-4, -9}, {-2, -9}, {-4, -8}, {8, -8}, {-3, -7}, {8, -7}, {-3, -6}, {9, -6}, {-3, -5}, {9, -5}, {-2, -4}, {9, -4}, {-8, -3}, {10, -3}, {-11, -2}, {10, -2}, {-11, -1}, {10, -1}, {-10, 0}, {10, 0}, {-10, 1}, {11, 1}, {-10, 2}, {11, 2}, {-10, 3}, {11, 3}, {-9, 4}, {12, 4}, {-9, 5}, {12, 5}, {-9, 6}, {13, 6}, {-8, 7}, {12, 7}, {-8, 8}, {9, 8}
TPoint {-8, 9}, {-3, 9}, {-7, 10}, {-3, 10}, {-7, 11}, {-3, 11}, {-7, 12}, {-4, 12}, {-6, 13}
state14LeftRightEnd TPoint {-6, 13}

state15DrawStart TPoint {-10, 10}, {-10, 9}, {-10, 8}, {-10, 7}, {-10, 6}, {-10, 5}, {-10, 4}, {-10, 3}, {-10, 2}, {-10, 1}, {-10, 0}, {-10, -1}, {-10, -2}, {-10, -3}, {-10, -4}, {-10, -5}, {-9, 10}, {-9, 9}, {-9, 8}, {-9, 7}, {-9, 6}, {-9, 5}, {-9, 4}, {-9, 3}, {-9, 2}, {-9, 1}, {-9, 0}, {-9, -1}, {-9, -2}, {-9, -3}, {-9, -4}, {-9, -5}, {-8, 10}, {-8, 9}, {-8, 8}, {-8, 7}, {-8, 6}, {-8, 5}
TPoint {-8, 4}, {-8, 3}, {-8, 2}, {-8, 1}, {-8, 0}, {-8, -1}, {-8, -2}, {-8, -3}, {-8, -4}, {-8, -5}, {-7, 10}, {-7, 9}, {-7, 8}, {-7, 7}, {-7, 6}, {-7, 5}, {-7, 4}, {-7, 3}, {-7, 2}, {-7, 1}, {-7, 0}, {-7, -1}, {-7, -2}, {-7, -3}, {-7, -4}, {-7, -5}, {-6, 10}, {-6, 9}, {-6, 8}, {-6, 7}, {-6, 6}, {-6, 5}, {-6, 4}, {-6, 3}, {-6, 2}, {-6, 1}, {-6, 0}, {-6, -1}, {-6, -2}, {-6, -3}, {-6, -4}
TPoint {-6, -5}, {-5, 5}, {-5, 4}, {-5, 3}, {-5, 2}, {-5, 1}, {-5, 0}, {-5, -1}, {-4, 5}, {-4, 4}, {-4, 3}, {-4, 2}, {-4, 1}, {-4, 0}, {-4, -1}, {-3, 5}, {-3, 4}, {-3, 3}, {-3, 2}, {-3, 1}, {-3, 0}, {-3, -1}, {-2, 5}, {-2, 4}, {-2, 3}, {-2, 2}, {-2, 1}, {-2, 0}, {-2, -1}, {-1, 5}, {-1, 4}, {-1, 3}, {-1, 2}, {-1, 1}, {-1, 0}, {-1, -1}, {-1, -2}, {-1, -3}, {-1, -4}, {-1, -5}, {-1, -6}, {-1, -7}
TPoint {-1, -8}, {-1, -9}, {-1, -10}, {0, 5}, {0, 4}, {0, 3}, {0, 2}, {0, 1}, {0, 0}, {0, -1}, {0, -2}, {0, -3}, {0, -4}, {0, -5}, {0, -6}, {0, -7}, {0, -8}, {0, -9}, {0, -10}, {1, 5}, {1, 4}, {1, 3}, {1, 2}, {1, 1}, {1, 0}, {1, -1}, {1, -2}, {1, -3}, {1, -4}, {1, -5}, {1, -6}, {1, -7}, {1, -8}, {1, -9}, {1, -10}, {2, 5}, {2, 4}, {2, 3}, {2, 2}, {2, 1}, {2, 0}, {2, -1}, {3, 5}, {3, 4}, {3, 3}
TPoint {3, 2}, {3, 1}, {3, 0}, {3, -1}, {4, 5}, {4, 4}, {4, 3}, {4, 2}, {4, 1}, {4, 0}, {4, -1}, {5, 5}, {5, 4}, {5, 3}, {5, 2}, {5, 1}, {5, 0}, {5, -1}, {6, 10}, {6, 9}, {6, 8}, {6, 7}, {6, 6}, {6, 5}, {6, 4}, {6, 3}, {6, 2}, {6, 1}, {6, 0}, {6, -1}, {6, -2}, {6, -3}, {6, -4}, {6, -5}, {7, 10}, {7, 9}, {7, 8}, {7, 7}, {7, 6}, {7, 5}, {7, 4}, {7, 3}, {7, 2}, {7, 1}, {7, 0}, {7, -1}, {7, -2}
TPoint {7, -3}, {7, -4}, {7, -5}, {8, 10}, {8, 9}, {8, 8}, {8, 7}, {8, 6}, {8, 5}, {8, 4}, {8, 3}, {8, 2}, {8, 1}, {8, 0}, {8, -1}, {8, -2}, {8, -3}, {8, -4}, {8, -5}, {9, 10}, {9, 9}, {9, 8}, {9, 7}, {9, 6}, {9, 5}, {9, 4}, {9, 3}, {9, 2}, {9, 1}, {9, 0}, {9, -1}, {9, -2}, {9, -3}, {9, -4}, {9, -5}, {10, 10}, {10, 9}, {10, 8}, {10, 7}, {10, 6}, {10, 5}, {10, 4}, {10, 3}, {10, 2}, {10, 1}
TPoint {10, 0}, {10, -1}, {10, -2}, {10, -3}, {10, -4}
state15DrawEnd TPoint {10, -5}
state15BarrelEdge TPoint {0, -10}
state15Rectangle RECT {-10, -10, 10, 10}
state15LeftRightStart TPoint {0, -10}, {1, -10}, {0, -9}, {1, -9}, {0, -8}, {1, -8}, {0, -7}, {1, -7}, {0, -6}, {1, -6}, {-10, -5}, {10, -5}, {-10, -4}, {10, -4}, {-10, -3}, {10, -3}, {-10, -2}, {10, -2}, {-10, -1}, {10, -1}, {-10, 0}, {10, 0}, {-10, 1}, {10, 1}, {-10, 2}, {10, 2}, {-10, 3}, {10, 3}, {-10, 4}, {10, 4}, {-10, 5}, {10, 5}, {-10, 6}, {10, 6}, {-10, 7}, {10, 7}, {-10, 8}, {10, 8}
TPoint {-10, 9}, {10, 9}, {-10, 10}
state15LeftRightEnd TPoint {10, 10}

state16DrawStart TPoint {-13, 6}, {-12, 5}, {-12, 5}, {-12, 4}, {-11, 3}, {-11, 2}, {-11, 1}, {-10, 0}, {-10, -1}, {-10, -2}, {-10, -3}, {-9, -4}, {-9, -5}, {-9, -6}, {-8, -7}, {-8, -8}, {-12, 7}, {-11, 6}, {-11, 5}, {-11, 4}, {-10, 3}, {-10, 2}, {-10, 1}, {-9, 0}, {-9, -1}, {-9, -2}, {-9, -3}, {-8, -4}, {-8, -5}, {-8, -6}, {-7, -7}, {-7, -8}, {-11, 7}, {-10, 6}, {-10, 5}, {-10, 4}, {-9, 3}
TPoint {-9, 2}, {-9, 1}, {-9, 0}, {-8, -1}, {-8, -2}, {-8, -2}, {-7, -3}, {-7, -4}, {-7, -5}, {-6, -6}, {-6, -7}, {-10, 7}, {-9, 6}, {-9, 5}, {-9, 4}, {-9, 4}, {-8, 3}, {-8, 2}, {-8, 1}, {-7, 0}, {-7, -1}, {-7, -2}, {-6, -3}, {-6, -4}, {-6, -5}, {-5, -6}, {-5, -7}, {-9, 8}, {-8, 7}, {-8, 6}, {-8, 5}, {-8, 4}, {-7, 3}, {-7, 2}, {-7, 1}, {-6, 0}, {-6, -1}, {-6, -2}, {-5, -3}, {-5, -4}, {-5, -5}
TPoint {-4, -6}, {-4, -7}, {-6, 3}, {-6, 2}, {-6, 1}, {-5, 0}, {-5, -1}, {-5, -2}, {-4, -2}, {-5, 4}, {-5, 3}, {-5, 2}, {-4, 1}, {-4, 0}, {-4, -1}, {-3, -2}, {-4, 4}, {-4, 3}, {-4, 2}, {-3, 1}, {-3, 0}, {-3, -1}, {-3, -2}, {-3, 4}, {-3, 3}, {-3, 2}, {-3, 1}, {-2, 0}, {-2, -1}, {-2, -2}, {-2, 4}, {-2, 3}, {-2, 3}, {-2, 2}, {-1, 1}, {-1, 0}, {-1, -1}, {0, -2}, {0, -3}, {0, -4}, {1, -5}, {1, -6}
TPoint {1, -7}, {2, -8}, {2, -9}, {2, -10}, {-2, 5}, {-1, 4}, {-1, 3}, {-1, 2}, {0, 1}, {0, 0}, {0, -1}, {1, -2}, {1, -3}, {1, -4}, {2, -5}, {2, -6}, {2, -7}, {2, -8}, {3, -9}, {3, -10}, {-1, 5}, {0, 4}, {0, 3}, {0, 2}, {1, 1}, {1, 0}, {1, -1}, {2, -2}, {2, -3}, {2, -3}, {2, -4}, {3, -5}, {3, -6}, {3, -7}, {4, -8}, {4, -9}, {0, 5}, {1, 4}, {1, 3}, {1, 3}, {2, 2}, {2, 1}, {2, 0}, {1, 6}, {2, 5}
TPoint {2, 4}, {2, 3}, {3, 2}, {3, 1}, {3, 0}, {2, 6}, {3, 5}, {3, 4}, {3, 3}, {3, 2}, {4, 1}, {4, 0}, {3, 6}, {4, 5}, {4, 4}, {4, 3}, {4, 2}, {5, 2}, {5, 1}, {3, 11}, {3, 10}, {3, 9}, {4, 9}, {4, 8}, {4, 7}, {4, 6}, {5, 5}, {5, 4}, {5, 3}, {6, 2}, {6, 1}, {6, 0}, {7, -1}, {7, -2}, {7, -3}, {4, 12}, {4, 11}, {4, 10}, {4, 9}, {5, 8}, {5, 7}, {5, 6}, {6, 5}, {6, 4}, {6, 3}, {7, 2}, {7, 1}, {7, 0}
TPoint {8, -1}, {8, -2}, {8, -3}, {5, 12}, {5, 11}, {5, 10}, {5, 9}, {6, 8}, {6, 7}, {6, 6}, {7, 5}, {7, 4}, {7, 3}, {8, 2}, {8, 2}, {8, 1}, {9, 0}, {9, -1}, {9, -2}, {5, 12}, {6, 11}, {6, 10}, {6, 9}, {7, 8}, {7, 8}, {7, 7}, {8, 6}, {8, 5}, {8, 4}, {9, 3}, {9, 2}, {9, 1}, {9, 0}, {10, -1}, {10, -2}, {6, 13}, {7, 12}, {7, 11}, {7, 10}, {8, 9}, {8, 8}, {8, 7}, {9, 6}, {9, 5}, {9, 4}, {10, 3}
TPoint {10, 2}, {10, 1}, {10, 0}, {11, -1}
state16DrawEnd TPoint {11, -2}
state16BarrelEdge TPoint {3, -10}
state16Rectangle RECT {-13, -10, 11, 13}
state16LeftRightStart TPoint {2, -10}, {3, -10}, {2, -9}, {4, -9}, {-8, -8}, {4, -8}, {-8, -7}, {3, -7}, {-9, -6}, {3, -6}, {-9, -5}, {3, -5}, {-9, -4}, {2, -4}, {-10, -3}, {8, -3}, {-10, -2}, {11, -2}, {-10, -1}, {11, -1}, {-10, 0}, {10, 0}, {-11, 1}, {10, 1}, {-11, 2}, {10, 2}, {-11, 3}, {10, 3}, {-12, 4}, {9, 4}, {-12, 5}, {9, 5}, {-13, 6}, {9, 6}, {-12, 7}, {8, 7}, {-9, 8}, {8, 8}, {3, 9}
TPoint {8, 9}, {3, 10}, {7, 10}, {3, 11}, {7, 11}, {4, 12}, {7, 12}, {6, 13}
state16LeftRightEnd TPoint {6, 13}

state17DrawStart TPoint {-14, 2}, {-13, 1}, {-13, 1}, {-12, 0}, {-12, -1}, {-11, -2}, {-10, -3}, {-10, -3}, {-9, -4}, {-9, -5}, {-8, -6}, {-8, -7}, {-7, -7}, {-6, -8}, {-6, -9}, {-5, -10}, {-13, 3}, {-13, 2}, {-12, 1}, {-11, 0}, {-11, 0}, {-10, -1}, {-10, -2}, {-9, -3}, {-8, -4}, {-8, -4}, {-7, -5}, {-7, -6}, {-6, -7}, {-6, -8}, {-5, -9}, {-4, -9}, {-12, 3}, {-12, 3}, {-11, 2}, {-11, 1}
TPoint {-10, 0}, {-9, -1}, {-9, -1}, {-8, -2}, {-8, -3}, {-7, -4}, {-6, -5}, {-6, -6}, {-5, -6}, {-5, -7}, {-4, -8}, {-4, -9}, {-12, 4}, {-11, 3}, {-10, 2}, {-10, 2}, {-9, 1}, {-9, 0}, {-8, -1}, {-7, -2}, {-7, -2}, {-6, -3}, {-6, -4}, {-5, -5}, {-4, -6}, {-4, -7}, {-3, -7}, {-3, -8}, {-11, 5}, {-10, 4}, {-10, 3}, {-9, 2}, {-8, 1}, {-8, 1}, {-7, 0}, {-7, -1}, {-6, -2}, {-5, -3}, {-5, -4}
TPoint {-4, -4}, {-4, -5}, {-3, -6}, {-3, -7}, {-2, -8}, {-7, 1}, {-6, 0}, {-6, -1}, {-5, -1}, {-5, -2}, {-4, -3}, {-3, -4}, {-6, 2}, {-6, 1}, {-5, 0}, {-4, -1}, {-4, -2}, {-3, -2}, {-3, -3}, {-5, 2}, {-5, 1}, {-4, 1}, {-4, 0}, {-3, -1}, {-2, -2}, {-2, -3}, {-5, 3}, {-4, 2}, {-3, 1}, {-3, 0}, {-2, 0}, {-2, -1}, {-1, -2}, {-4, 3}, {-3, 3}, {-3, 2}, {-2, 1}, {-1, 0}, {-1, -1}, {0, -1}, {0, -2}
TPoint {1, -3}, {2, -4}, {2, -5}, {3, -5}, {3, -6}, {4, -7}, {4, -8}, {5, -9}, {-3, 4}, {-2, 3}, {-2, 2}, {-1, 2}, {-1, 1}, {0, 0}, {1, -1}, {1, -2}, {2, -2}, {2, -3}, {3, -4}, {4, -5}, {4, -6}, {5, -6}, {5, -7}, {6, -8}, {-2, 5}, {-2, 4}, {-1, 3}, {0, 2}, {0, 1}, {1, 1}, {1, 0}, {2, -1}, {3, -2}, {3, -3}, {4, -3}, {4, -4}, {5, -5}, {6, -6}, {6, -7}, {7, -8}, {-1, 5}, {-1, 4}, {0, 4}, {0, 3}
TPoint {1, 2}, {2, 1}, {2, 0}, {-1, 6}, {0, 5}, {1, 4}, {1, 3}, {2, 3}, {2, 2}, {3, 1}, {0, 6}, {1, 6}, {1, 5}, {2, 4}, {3, 3}, {3, 2}, {4, 2}, {1, 7}, {2, 6}, {2, 5}, {3, 5}, {3, 4}, {4, 3}, {5, 2}, {-1, 12}, {0, 11}, {0, 10}, {1, 9}, {1, 8}, {2, 8}, {3, 7}, {3, 6}, {4, 5}, {4, 4}, {5, 4}, {5, 3}, {6, 2}, {7, 1}, {7, 0}, {8, -1}, {0, 12}, {0, 11}, {1, 11}, {2, 10}, {2, 9}, {3, 8}, {3, 7}
TPoint {4, 7}, {4, 6}, {5, 5}, {6, 4}, {6, 3}, {7, 2}, {7, 2}, {8, 1}, {9, 0}, {1, 13}, {1, 12}, {2, 11}, {2, 10}, {3, 10}, {4, 9}, {4, 8}, {5, 7}, {5, 6}, {6, 6}, {6, 5}, {7, 4}, {8, 3}, {8, 2}, {9, 1}, {9, 1}, {1, 13}, {2, 13}, {3, 12}, {3, 11}, {4, 10}, {4, 9}, {5, 9}, {6, 8}, {6, 7}, {7, 6}, {7, 5}, {8, 4}, {8, 4}, {9, 3}, {10, 2}, {10, 1}, {2, 14}, {3, 13}, {3, 12}, {4, 12}, {5, 11}
TPoint {5, 10}, {6, 9}, {6, 8}, {7, 7}, {8, 7}, {8, 6}, {9, 5}, {9, 4}, {10, 3}, {10, 3}
state17DrawEnd TPoint {11, 2}
state17BarrelEdge TPoint {6, -8}
state17Rectangle RECT {-14, -10, 11, 14}
state17LeftRightStart TPoint {-5, -10}, {-5, -10}, {-6, -9}, {5, -9}, {-6, -8}, {7, -8}, {-8, -7}, {6, -7}, {-8, -6}, {6, -6}, {-9, -5}, {5, -5}, {-9, -4}, {4, -4}, {-10, -3}, {4, -3}, {-11, -2}, {3, -2}, {-12, -1}, {8, -1}, {-12, 0}, {9, 0}, {-13, 1}, {10, 1}, {-14, 2}, {11, 2}, {-13, 3}, {10, 3}, {-12, 4}, {9, 4}, {-11, 5}, {9, 5}, {0, 6}, {8, 6}, {1, 7}, {8, 7}, {1, 8}, {6, 8}, {1, 9}, {6, 9}
TPoint {0, 10}, {5, 10}, {0, 11}, {5, 11}, {0, 12}, {4, 12}, {1, 13}, {3, 13}, {2, 14}
state17LeftRightEnd TPoint {2, 14}

state18DrawStart TPoint {-14, -2}, {-13, -3}, {-12, -3}, {-12, -4}, {-11, -5}, {-10, -5}, {-9, -6}, {-8, -6}, {-7, -7}, {-7, -8}, {-6, -8}, {-5, -9}, {-4, -9}, {-3, -10}, {-3, -10}, {-2, -11}, {-13, -1}, {-13, -2}, {-12, -3}, {-11, -3}, {-10, -4}, {-9, -4}, {-9, -5}, {-8, -6}, {-7, -6}, {-6, -7}, {-5, -7}, {-4, -8}, {-4, -8}, {-3, -9}, {-2, -10}, {-1, -10}, {-13, -1}, {-12, -1}, {-11, -2}
TPoint {-10, -2}, {-10, -3}, {-9, -4}, {-8, -4}, {-7, -5}, {-6, -5}, {-6, -6}, {-5, -6}, {-4, -7}, {-3, -8}, {-2, -8}, {-1, -9}, {-1, -9}, {-12, 0}, {-11, 0}, {-11, -1}, {-10, -2}, {-9, -2}, {-8, -3}, {-7, -3}, {-7, -4}, {-6, -4}, {-5, -5}, {-4, -6}, {-3, -6}, {-2, -7}, {-2, -7}, {-1, -8}, {0, -9}, {-12, 1}, {-11, 0}, {-10, 0}, {-9, -1}, {-8, -1}, {-8, -2}, {-7, -3}, {-6, -3}, {-5, -4}
TPoint {-4, -4}, {-4, -5}, {-3, -5}, {-2, -6}, {-1, -7}, {0, -7}, {1, -8}, {-7, -1}, {-6, -2}, {-5, -2}, {-5, -3}, {-4, -3}, {-3, -4}, {-2, -5}, {-6, 0}, {-6, -1}, {-5, -1}, {-4, -2}, {-3, -3}, {-2, -3}, {-2, -4}, {-6, 1}, {-5, 0}, {-4, -1}, {-3, -1}, {-3, -2}, {-2, -2}, {-1, -3}, {-5, 1}, {-4, 1}, {-4, 0}, {-3, 0}, {-2, -1}, {-1, -2}, {0, -2}, {-5, 2}, {-4, 2}, {-3, 1}, {-2, 0}, {-1, 0}
TPoint {-1, -1}, {0, -1}, {1, -2}, {2, -3}, {3, -3}, {3, -4}, {4, -4}, {5, -5}, {6, -6}, {7, -6}, {8, -7}, {-4, 3}, {-3, 2}, {-2, 2}, {-2, 1}, {-1, 1}, {0, 0}, {1, -1}, {2, -1}, {2, -2}, {3, -2}, {4, -3}, {5, -4}, {6, -4}, {6, -5}, {7, -5}, {8, -6}, {-3, 4}, {-3, 3}, {-2, 3}, {-1, 2}, {0, 1}, {1, 1}, {1, 0}, {2, 0}, {3, -1}, {4, -2}, {5, -2}, {5, -3}, {6, -3}, {7, -4}, {8, -4}, {9, -5}, {-3, 5}
TPoint {-2, 4}, {-1, 3}, {0, 3}, {0, 2}, {1, 2}, {2, 1}, {-2, 5}, {-1, 5}, {-1, 4}, {0, 4}, {1, 3}, {2, 2}, {3, 2}, {-2, 6}, {-1, 6}, {0, 5}, {1, 4}, {2, 4}, {2, 3}, {3, 3}, {-1, 7}, {0, 6}, {1, 6}, {1, 5}, {2, 5}, {3, 4}, {4, 3}, {-5, 11}, {-4, 10}, {-3, 10}, {-2, 9}, {-1, 8}, {-1, 8}, {0, 7}, {1, 7}, {2, 6}, {3, 5}, {4, 5}, {4, 4}, {5, 4}, {6, 3}, {7, 3}, {8, 2}, {-4, 12}, {-3, 11}, {-2, 10}
TPoint {-2, 10}, {-1, 9}, {0, 9}, {1, 8}, {2, 7}, {2, 7}, {3, 6}, {4, 6}, {5, 5}, {6, 4}, {7, 4}, {7, 3}, {8, 3}, {-3, 12}, {-3, 12}, {-2, 11}, {-1, 11}, {0, 10}, {1, 9}, {1, 9}, {2, 8}, {3, 8}, {4, 7}, {5, 6}, {6, 6}, {6, 5}, {7, 5}, {8, 4}, {9, 4}, {-3, 13}, {-2, 13}, {-1, 12}, {0, 11}, {0, 11}, {1, 10}, {2, 10}, {3, 9}, {4, 8}, {4, 8}, {5, 7}, {6, 7}, {7, 6}, {8, 6}, {9, 5}, {9, 4}, {-2, 14}
TPoint {-1, 13}, {-1, 13}, {0, 12}, {1, 12}, {2, 11}, {3, 10}, {3, 10}, {4, 9}, {5, 9}, {6, 8}, {7, 8}, {7, 7}, {8, 6}, {9, 6}
state18DrawEnd TPoint {10, 5}
state18BarrelEdge TPoint {8, -6}
state18Rectangle RECT {-14, -11, 10, 14}
state18LeftRightStart TPoint {-2, -11}, {-2, -11}, {-3, -10}, {-1, -10}, {-5, -9}, {0, -9}, {-7, -8}, {1, -8}, {-7, -7}, {8, -7}, {-9, -6}, {8, -6}, {-11, -5}, {9, -5}, {-12, -4}, {8, -4}, {-13, -3}, {6, -3}, {-14, -2}, {5, -2}, {-13, -1}, {3, -1}, {-12, 0}, {2, 0}, {-12, 1}, {2, 1}, {-5, 2}, {8, 2}, {-4, 3}, {8, 3}, {-3, 4}, {9, 4}, {-3, 5}, {10, 5}, {-2, 6}, {9, 6}, {0, 7}, {7, 7}, {1, 8}
TPoint {7, 8}, {-2, 9}, {5, 9}, {-4, 10}, {3, 10}, {-5, 11}, {2, 11}, {-4, 12}, {1, 12}, {-3, 13}, {-1, 13}, {-2, 14}
state18LeftRightEnd TPoint {-2, 14}

state19DrawStart TPoint {-13, -6}, {-12, -7}, {-11, -7}, {-10, -7}, {-9, -8}, {-8, -8}, {-7, -8}, {-6, -9}, {-5, -9}, {-4, -9}, {-3, -10}, {-2, -10}, {-1, -10}, {0, -10}, {1, -11}, {2, -11}, {-12, -5}, {-11, -6}, {-10, -6}, {-9, -6}, {-8, -7}, {-8, -7}, {-7, -7}, {-6, -8}, {-5, -8}, {-4, -8}, {-3, -9}, {-2, -9}, {-1, -9}, {0, -9}, {1, -10}, {2, -10}, {-12, -5}, {-11, -5}, {-10, -5}, {-9, -5}
TPoint {-8, -6}, {-7, -6}, {-6, -6}, {-5, -7}, {-4, -7}, {-3, -7}, {-2, -8}, {-2, -8}, {-1, -8}, {0, -9}, {1, -9}, {2, -9}, {-12, -4}, {-11, -4}, {-10, -4}, {-9, -4}, {-8, -5}, {-7, -5}, {-6, -5}, {-5, -6}, {-4, -6}, {-3, -6}, {-2, -7}, {-1, -7}, {0, -7}, {1, -8}, {2, -8}, {3, -8}, {-11, -3}, {-10, -3}, {-9, -3}, {-9, -4}, {-8, -4}, {-7, -4}, {-6, -4}, {-5, -5}, {-4, -5}, {-3, -5}, {-2, -6}
TPoint {-1, -6}, {0, -6}, {1, -7}, {2, -7}, {3, -7}, {-6, -3}, {-5, -4}, {-4, -4}, {-3, -4}, {-2, -4}, {-2, -5}, {-1, -5}, {-6, -2}, {-5, -3}, {-4, -3}, {-3, -3}, {-2, -3}, {-1, -4}, {0, -4}, {-6, -1}, {-5, -2}, {-4, -2}, {-3, -2}, {-2, -3}, {-1, -3}, {0, -3}, {-5, 0}, {-4, -1}, {-3, -1}, {-3, -1}, {-2, -2}, {-1, -2}, {0, -2}, {-5, 1}, {-4, 0}, {-3, 0}, {-2, 0}, {-1, -1}, {0, -1}, {1, -1}
TPoint {2, -2}, {3, -2}, {3, -2}, {4, -2}, {5, -3}, {6, -3}, {7, -3}, {8, -4}, {9, -4}, {-5, 2}, {-4, 1}, {-3, 1}, {-2, 1}, {-1, 0}, {0, 0}, {1, 0}, {2, -1}, {3, -1}, {4, -1}, {5, -2}, {6, -2}, {7, -2}, {8, -2}, {9, -3}, {10, -3}, {-4, 2}, {-3, 2}, {-3, 2}, {-2, 2}, {-1, 1}, {0, 1}, {1, 1}, {2, 0}, {3, 0}, {4, 0}, {5, -1}, {6, -1}, {7, -1}, {8, -2}, {9, -2}, {10, -2}, {-4, 3}, {-3, 3}, {-2, 3}
TPoint {-1, 3}, {0, 2}, {1, 2}, {2, 2}, {-4, 4}, {-3, 4}, {-2, 4}, {-1, 3}, {0, 3}, {1, 3}, {2, 3}, {-4, 5}, {-3, 5}, {-2, 5}, {-1, 4}, {0, 4}, {1, 4}, {2, 3}, {-3, 6}, {-2, 6}, {-1, 6}, {0, 5}, {1, 5}, {2, 5}, {2, 4}, {-8, 9}, {-7, 8}, {-6, 8}, {-5, 8}, {-4, 8}, {-3, 7}, {-2, 7}, {-1, 7}, {0, 6}, {1, 6}, {2, 6}, {3, 5}, {4, 5}, {5, 5}, {6, 4}, {7, 4}, {-7, 10}, {-6, 9}, {-5, 9}, {-4, 9}
TPoint {-4, 9}, {-3, 8}, {-2, 8}, {-1, 8}, {0, 7}, {1, 7}, {2, 7}, {3, 6}, {4, 6}, {5, 6}, {6, 5}, {7, 5}, {-7, 11}, {-6, 10}, {-5, 10}, {-4, 10}, {-3, 9}, {-2, 9}, {-1, 9}, {0, 9}, {1, 8}, {2, 8}, {2, 8}, {3, 7}, {4, 7}, {5, 7}, {6, 6}, {7, 6}, {-7, 12}, {-6, 11}, {-5, 11}, {-4, 11}, {-3, 10}, {-2, 10}, {-1, 10}, {0, 9}, {1, 9}, {2, 9}, {3, 9}, {4, 8}, {5, 8}, {6, 8}, {7, 7}, {8, 7}, {-6, 13}
TPoint {-5, 12}, {-5, 12}, {-4, 12}, {-3, 11}, {-2, 11}, {-1, 11}, {0, 10}, {1, 10}, {2, 10}, {3, 10}, {4, 9}, {5, 9}, {6, 9}, {7, 8}
state19DrawEnd TPoint {8, 8}
state19BarrelEdge TPoint {10, -3}
state19Rectangle RECT {-13, -11, 10, 13}
state19LeftRightStart TPoint {1, -11}, {2, -11}, {-3, -10}, {2, -10}, {-6, -9}, {2, -9}, {-9, -8}, {3, -8}, {-12, -7}, {3, -7}, {-13, -6}, {0, -6}, {-12, -5}, {-1, -5}, {-12, -4}, {9, -4}, {-11, -3}, {10, -3}, {-6, -2}, {10, -2}, {-6, -1}, {7, -1}, {-5, 0}, {4, 0}, {-5, 1}, {1, 1}, {-5, 2}, {2, 2}, {-4, 3}, {2, 3}, {-4, 4}, {7, 4}, {-4, 5}, {7, 5}, {-3, 6}, {7, 6}, {-3, 7}, {8, 7}, {-7, 8}
TPoint {8, 8}, {-8, 9}, {6, 9}, {-7, 10}, {3, 10}, {-7, 11}, {-1, 11}, {-7, 12}, {-4, 12}, {-6, 13}
state19LeftRightEnd TPoint {-6, 13}

state0 TState {{3, 0}, {3, 0}, offset state0DrawStart, offset state0BarrelEdge, offset state0Rectangle, offset state0LeftRightStart, offset state0LeftRightEnd, (offset state0DrawEnd - offset state0DrawStart + sizeof TPoint)/sizeof TPoint}
state1 TState {{3, 1}, {3, 1}, offset state1DrawStart, offset state1BarrelEdge, offset state1Rectangle, offset state1LeftRightStart, offset state1LeftRightEnd, (offset state1DrawEnd - offset state1DrawStart + sizeof TPoint)/sizeof TPoint}
state2 TState {{2, 2}, {2, 2}, offset state2DrawStart, offset state2BarrelEdge, offset state2Rectangle, offset state2LeftRightStart, offset state2LeftRightEnd, (offset state2DrawEnd - offset state2DrawStart + sizeof TPoint)/sizeof TPoint}
state3 TState {{2, 2}, {2, 2}, offset state3DrawStart, offset state3BarrelEdge, offset state3Rectangle, offset state3LeftRightStart, offset state3LeftRightEnd, (offset state3DrawEnd - offset state3DrawStart + sizeof TPoint)/sizeof TPoint}
state4 TState {{1, 3}, {1, 3}, offset state4DrawStart, offset state4BarrelEdge, offset state4Rectangle, offset state4LeftRightStart, offset state4LeftRightEnd, (offset state4DrawEnd - offset state4DrawStart + sizeof TPoint)/sizeof TPoint}
state5 TState {{0, 3}, {0, 3}, offset state5DrawStart, offset state5BarrelEdge, offset state5Rectangle, offset state5LeftRightStart, offset state5LeftRightEnd, (offset state5DrawEnd - offset state5DrawStart + sizeof TPoint)/sizeof TPoint}
state6 TState {{-1, 3}, {-1, 3}, offset state6DrawStart, offset state6BarrelEdge, offset state6Rectangle, offset state6LeftRightStart, offset state6LeftRightEnd, (offset state6DrawEnd - offset state6DrawStart + sizeof TPoint)/sizeof TPoint}
state7 TState {{-2, 2}, {-2, 2}, offset state7DrawStart, offset state7BarrelEdge, offset state7Rectangle, offset state7LeftRightStart, offset state7LeftRightEnd, (offset state7DrawEnd - offset state7DrawStart + sizeof TPoint)/sizeof TPoint}
state8 TState {{-2, 2}, {-2, 2}, offset state8DrawStart, offset state8BarrelEdge, offset state8Rectangle, offset state8LeftRightStart, offset state8LeftRightEnd, (offset state8DrawEnd - offset state8DrawStart + sizeof TPoint)/sizeof TPoint}
state9 TState {{-3, 1}, {-3, 1}, offset state9DrawStart, offset state9BarrelEdge, offset state9Rectangle, offset state9LeftRightStart, offset state9LeftRightEnd, (offset state9DrawEnd - offset state9DrawStart + sizeof TPoint)/sizeof TPoint}
state10 TState {{-3, 0}, {-3, 0}, offset state10DrawStart, offset state10BarrelEdge, offset state10Rectangle, offset state10LeftRightStart, offset state10LeftRightEnd, (offset state10DrawEnd - offset state10DrawStart + sizeof TPoint)/sizeof TPoint}
state11 TState {{-3, -1}, {-3, -1}, offset state11DrawStart, offset state11BarrelEdge, offset state11Rectangle, offset state11LeftRightStart, offset state11LeftRightEnd, (offset state11DrawEnd - offset state11DrawStart + sizeof TPoint)/sizeof TPoint}
state12 TState {{-2, -2}, {-2, -2}, offset state12DrawStart, offset state12BarrelEdge, offset state12Rectangle, offset state12LeftRightStart, offset state12LeftRightEnd, (offset state12DrawEnd - offset state12DrawStart + sizeof TPoint)/sizeof TPoint}
state13 TState {{-2, -2}, {-2, -2}, offset state13DrawStart, offset state13BarrelEdge, offset state13Rectangle, offset state13LeftRightStart, offset state13LeftRightEnd, (offset state13DrawEnd - offset state13DrawStart + sizeof TPoint)/sizeof TPoint}
state14 TState {{-1, -3}, {-1, -3}, offset state14DrawStart, offset state14BarrelEdge, offset state14Rectangle, offset state14LeftRightStart, offset state14LeftRightEnd, (offset state14DrawEnd - offset state14DrawStart + sizeof TPoint)/sizeof TPoint}
state15 TState {{0, -3}, {0, -3}, offset state15DrawStart, offset state15BarrelEdge, offset state15Rectangle, offset state15LeftRightStart, offset state15LeftRightEnd, (offset state15DrawEnd - offset state15DrawStart + sizeof TPoint)/sizeof TPoint}
state16 TState {{1, -3}, {1, -3}, offset state16DrawStart, offset state16BarrelEdge, offset state16Rectangle, offset state16LeftRightStart, offset state16LeftRightEnd, (offset state16DrawEnd - offset state16DrawStart + sizeof TPoint)/sizeof TPoint}
state17 TState {{2, -2}, {2, -2}, offset state17DrawStart, offset state17BarrelEdge, offset state17Rectangle, offset state17LeftRightStart, offset state17LeftRightEnd, (offset state17DrawEnd - offset state17DrawStart + sizeof TPoint)/sizeof TPoint}
state18 TState {{2, -2}, {2, -2}, offset state18DrawStart, offset state18BarrelEdge, offset state18Rectangle, offset state18LeftRightStart, offset state18LeftRightEnd, (offset state18DrawEnd - offset state18DrawStart + sizeof TPoint)/sizeof TPoint}
state19 TState {{3, -1}, {3, -1}, offset state19DrawStart, offset state19BarrelEdge, offset state19Rectangle, offset state19LeftRightStart, offset state19LeftRightEnd, (offset state19DrawEnd - offset state19DrawStart + sizeof TPoint)/sizeof TPoint}

enterIPMsg db "Enter the IP of the server (ipv4): "
invalidIPMsg db "Invalid IP! Exiting program"
connectionRefusedMsg db "Connection refused! Exiting program"

portToConnect dw 13568

startingRImagePath db "./startingR.bmp", 0
startingNoRImagePath db "./startingNoR.bmp", 0

instructionsRImagePath db "./instructionsR.bmp", 0
instructionsNoRImagePath db "./instructionsNoR.bmp", 0

winImagePath db "./win.bmp", 0
loseImagePath db "./lose.bmp", 0

shotSoundPath db "./shot.wav", 0
bulletHitWallSoundPath db "./bulletHitWall.wav", 0
explosionSoundPath db "./explosion.wav", 0

.data
ipToConnect db 16 dup(?)

clientAreaRectangle RECT {0, 0, WINDOW_WIDTH, WINDOW_HEIGHT}

myTank TTank {{WINDOW_WIDTH-600, WINDOW_HEIGHT-400}, offset state0}
myPrevTank TTank {{WINDOW_WIDTH-600, WINDOW_HEIGHT-400}, offset state0}
opponentTank TTank {{600, 400}, offset state10}
opponentPrevTank TTank {{600, 400}, offset state10} ; can be removed
myBullets TBullet MAX_MAX_BULLETS dup({})
opponentBullets TBullet MAX_MAX_BULLETS dup({})

walls RECT 10 dup ({})
numberOfWalls dword ?
maxBulletsInAnyMoment byte ?
bulletLife dword ?

inInstructions BOOLEAN FALSE
gameOver BOOLEAN FALSE
win BOOLEAN FALSE
lose BOOLEAN FALSE
w_a_s_d_space BOOLEAN 5 dup(FALSE)
exitMessageLoop BOOLEAN FALSE
quitProgram BOOLEAN FALSE
myReady BOOLEAN FALSE
GameLoopArgs GameLoopParams {offset myTank, offset myPrevTank, offset myBullets, offset opponentTank, ?, ?, offset gameOver, offset lose, offset w_a_s_d_space, offset state0, offset state19, offset opponentBullets, offset walls, offset shotSoundPath, offset bulletHitWallSoundPath}
recvMessagesArgs recvMessagesParams {?, offset exitMessageLoop, offset myTank, offset myPrevTank, offset opponentTank, offset opponentPrevTank, offset state0, offset opponentBullets, offset gameOver, ?, offset walls, offset numberOfWalls, offset maxBulletsInAnyMoment, offset bulletLife}

.code
StructCopy proc structSize:dword, s1:ptr byte, s2:ptr byte
	push ecx
	push eax
	push esi
	push edi

	mov ecx, 0
	mov esi, [s2]
	mov edi, [s1]
	loop_StructCopy:
	mov al, byte ptr [esi+ecx]
	mov byte ptr [edi+ecx], al

	inc ecx
	cmp ecx, [structSize]
	jnz loop_StructCopy

	pop edi
	pop esi
	pop eax
	pop ecx
ret
StructCopy endp

StructCompare proc structSize:dword, s1:ptr byte, s2:ptr byte
	push eax
	push ecx
	push esi
	push edi

	mov ecx, 0
	mov esi, [s2]
	mov edi, [s1]
	loop_StructCompare:
	mov al, byte ptr [esi+ecx]
	mov ah, byte ptr [edi+ecx]
	.if al != ah
		mov eax, FALSE
		jmp endStructCompare
	.endif

	inc ecx
	cmp ecx, [structSize]
	jnz loop_StructCompare
	mov eax, TRUE

	endStructCompare:
	pop edi
	pop esi
	pop ecx
	mov [ebp + 8 + 12], eax ; [ebp + 8 + bytes_of_params]
	pop eax
ret
StructCompare endp

ZeroStruct proc, structSize:dword, s:ptr byte
	push ecx
	push esi

	mov ecx, structSize
	mov esi, [s]
	loop_ZeroStruct:
	mov byte ptr [esi+ecx-1], 0
	dec ecx
	jnz loop_ZeroStruct

	pop esi
	pop ecx

ret
ZeroStruct endp


sbyteToDword proc sb:sbyte
	push eax

	mov eax, 0
	.if [sb] < 0
	mov eax, 0ffffff00h
	.endif
	mov al, [sb]

	mov [ebp + 8 + 4], eax ; [ebp + 8 + bytes_of_params]

	pop eax
ret
sbyteToDword endp

pointInRectangle proc x:dword, y:dword, rectangle:RECT
	push eax
	push ecx
	push edx

	mov eax, TRUE
	mov ecx, [x]
	mov edx, [y]
	.if ecx < [rectangle.left] || ecx > [rectangle.right] || edx < [rectangle.top] || edx > [rectangle.bottom]
		mov eax, FALSE
	.endif

	pop edx
	pop ecx
	mov [ebp + 8 + 24], eax ; [ebp + 8 + bytes_of_params]
	pop eax
ret
pointInRectangle endp

checkEveryPointIntersectsRectangle proc tankPTR:ptr TTank, startAdress:ptr TPoint, endAddress:ptr TPoint, jumping:byte, wallPTR:ptr RECT
	push eax
	push esi
	push ebx
	push edi
	push ecx

	mov esi, [tankPTR]
	assume esi:ptr TTank

	mov ebx, [startAdress]
	assume ebx:ptr TPoint
	
	mov edi, [wallPTR]
	assume edi:ptr RECT

	loop_checkEveryPointIntersectsRectangle:
	push 0
	invoke sbyteToDword, [[ebx].x]
	pop eax
	add eax, [[esi].centerPosition.x]
	mov ecx, eax

	push 0
	invoke sbyteToDword, [[ebx].y]
	pop eax
	add eax, [[esi].centerPosition.y]

	push 0
	invoke pointInRectangle, ecx, eax, RECT ptr [edi]
	pop eax
	.if eax == TRUE
		mov eax, TRUE
		jmp end_checkEveryPointIntersectsRectangle
	.endif

	mov eax, sizeof TPoint
	mul [jumping]
	add ebx, eax
	cmp ebx, [endAddress]
	jbe loop_checkEveryPointIntersectsRectangle
	mov eax, FALSE
	end_checkEveryPointIntersectsRectangle:
	pop ecx
	pop edi
	pop ebx
	pop esi
	mov [ebp + 8 + 20], eax ; [ebp + 8 + bytes_of_params]
	pop eax
ret
checkEveryPointIntersectsRectangle endp

tankIntersectsRectangles proc tankPTR:ptr TTank, rectanglesPTR:ptr RECT, arrLength:dword
	local dxLeftTank:sdword
	local dxRightTank:sdword
	local dyTopTank:sdword
	local dyBottomTank:sdword

	push eax
	push esi
	push edi
	push ecx
	push ebx
	push edx

	mov edi, [rectanglesPTR]
	assume edi:ptr RECT
	mov esi, [tankPTR]
	assume esi:ptr TTank

	mov ecx, [arrLength]
	loop_tankIntersectsRectangles:
		push ecx

		mov ecx, [[esi].statePTR]
		assume ecx:ptr TState
		mov ecx, [[ecx].rectanglePTR]
		assume ecx:ptr RECT

		mov eax, sdword ptr [[ecx].right]
		add eax, [[esi].centerPosition.x]
		.if eax < [[edi].left]
			jmp endOfCheckingCurrentRectangle
		.endif
		
		mov eax, sdword ptr [[ecx].left]
		add eax, [[esi].centerPosition.x]
		.if eax > [[edi].right]
			jmp endOfCheckingCurrentRectangle
		.endif

		mov eax, sdword ptr [[ecx].bottom]
		add eax, [[esi].centerPosition.y]
		.if eax < [[edi].top]
			jmp endOfCheckingCurrentRectangle
		.endif

		mov eax, sdword ptr [[ecx].top]
		add eax, [[esi].centerPosition.y]
		.if eax > [[edi].bottom]
			jmp endOfCheckingCurrentRectangle
		.endif

		mov eax, [[edi].left]
		mov [dxLeftTank], eax
		mov eax, [[esi].centerPosition.x]
		sub [dxLeftTank], eax
		mov eax, sdword ptr [[ecx].left]
		sub [dxLeftTank], eax

		mov eax, [[esi].centerPosition.x]
		mov [dxRightTank], eax
		mov eax, sdword ptr [[ecx].right]
		add [dxRightTank], eax
		mov eax, [[edi].right]
		sub [dxRightTank], eax
		
		mov eax, [[edi].top]
		mov [dyTopTank], eax
		mov eax, [[esi].centerPosition.y]
		sub [dyTopTank], eax
		mov eax, sdword ptr [[ecx].top]
		sub [dyTopTank], eax

		mov eax, [[esi].centerPosition.y]
		mov [dyBottomTank], eax
		mov eax, sdword ptr [[ecx].bottom]
		add [dyBottomTank], eax
		mov eax, [[edi].bottom]
		sub [dyBottomTank], eax

		.if TRUE ; sdword ptr [dxLeftTank] <= 0 && sdword ptr [dxRightTank] <= 0
			mov bl, 0 ; start from left
			mov bh, 1 ; jump by 1 point
		.elseif sdword ptr [dxLeftTank] > 0
			mov bl, sizeof TPoint ; start from right
			mov bh, 2 ; jump by 2 points
		.elseif sdword ptr [dxRightTank] > 0
			mov bl, 0 ; start from left
			mov bh, 2 ; jump by 2 points
		.endif

		.if TRUE ; sdword ptr [dyTopTank] <= 0 && sdword ptr [dyBottomTank] <= 0
			mov ecx, [[esi].statePTR]
			assume ecx:ptr TState
			mov edx, [[ecx].leftRightEndPTR]
			assume edx:ptr TPoint
			mov ecx, [[ecx].leftRightStartPTR]
			assume ecx:ptr TPoint
			
			push 0
			invoke sbyteToDword, bl
			pop eax
			add ecx, eax

		.elseif sdword ptr [dyTopTank] > 0 ; the top of the tank is above the top of the wall
			mov ecx, [[esi].statePTR]
			assume ecx:ptr TState
			mov edx, [[ecx].leftRightEndPTR]
			assume edx:ptr TPoint
			mov ecx, [[ecx].leftRightStartPTR]
			assume ecx:ptr TPoint

			push 0
			invoke sbyteToDword, bl
			pop eax
			add ecx, eax

			mov eax, sizeof TPoint
			push edx
			mul [dyTopTank]
			pop edx
			sal eax, 1

			add ecx, eax

		.elseif sdword ptr [dyBottomTank] > 0 ; the bottom of the tank is below the bottom of the wall
			mov ecx, [[esi].statePTR]
			assume ecx:ptr TState
			mov edx, [[ecx].leftRightEndPTR]
			assume edx:ptr TPoint
			mov ecx, [[ecx].leftRightStartPTR]
			assume ecx:ptr TPoint

			push 0
			invoke sbyteToDword, bl
			pop eax
			add ecx, eax

			mov eax, sizeof TPoint
			push edx
			mul [dyBottomTank]
			pop edx
			sal eax, 1
			sub edx, eax
			
		.endif

		push 0
		invoke checkEveryPointIntersectsRectangle, esi, ecx, edx, bh , edi
		pop eax
		.if eax == TRUE
			mov eax, TRUE
			pop ecx
			jmp intersectsWithRectangle
		.endif
		endOfCheckingCurrentRectangle:
		add edi, sizeof RECT
	pop ecx
	dec ecx
	jnz loop_tankIntersectsRectangles

	mov eax, FALSE
	intersectsWithRectangle:
	pop edx
	pop ebx
	pop ecx
	pop edi
	pop esi
	mov [ebp + 8 + 12], eax ; [ebp + 8 + bytes_of_params]
	pop eax
ret
tankIntersectsRectangles endp

getCurrentTankRectangle proc tankPTR:ptr TTank, rectangleToSave:ptr RECT
	push eax
	push esi
	push edi

	mov esi, [tankPTR]
	assume esi:ptr TTank
	mov edi, [rectangleToSave]
	assume edi:ptr RECT

	mov eax, [esi].centerPosition.x
	mov [edi].left, eax
	mov [edi].right, eax

	mov eax, [esi].centerPosition.y
	mov [edi].top, eax
	mov [edi].bottom, eax

	mov esi, [esi].statePTR
	assume esi:ptr TState
	mov esi, [esi].rectanglePTR
	assume esi:ptr RECT

	mov eax, [esi].left
	add [edi].left, eax

	mov eax, [esi].right
	add [edi].right, eax

	mov eax, [esi].top
	add [edi].top, eax

	mov eax, [esi].bottom
	add [edi].bottom, eax

	pop edi
	pop esi
	pop eax
ret
getCurrentTankRectangle endp


rectangleRectangleCollision proc rect1PTR:ptr RECT, rect2PTR:ptr RECT
	push eax
	push esi
	push edi
	push edx

	mov esi, [rect1PTR]
	mov edi, [rect2PTR]
	assume esi:ptr RECT
	assume edi:ptr RECT

	mov eax, FALSE

	mov edx, [edi].right
	.if [esi].left < edx
		mov edx, [edi].left
		.if [esi].right > edx
			mov edx, [edi].bottom
			.if [esi].top < edx
				mov edx, [edi].top
				.if [esi].bottom > edx
					mov eax, TRUE
				.endif
			.endif
		.endif
	.endif
	
	pop edx
	pop edi
	pop esi
	mov [ebp + 8 + 8], eax ; [ebp + 8 + bytes_of_params]
	pop eax
ret
rectangleRectangleCollision endp

tankTankCollision proc myTankPTR:ptr TTank, opponentTankPTR:ptr TTank
	local myRect:RECT
	local opponentRect:RECT
	push eax

	invoke getCurrentTankRectangle, [myTankPTR], addr myRect
	invoke getCurrentTankRectangle, [opponentTankPTR], addr opponentRect

	push 0
	invoke rectangleRectangleCollision, addr myRect, addr opponentRect
	pop eax

	mov [ebp + 8 + 8], eax ; [ebp + 8 + bytes_of_params]
	pop eax
ret
tankTankCollision endp

drawTank proc hdc:HDC, tankPTR:ptr TTank, color:COLORREF
	local x:sdword
	local y:sdword

	push eax
	push ebx
	push ecx
	push edx
	push edi
	push esi

	mov ecx, 0
	mov edi, [tankPTR]
	assume edi:ptr TTank
	mov ebx, [[edi].statePTR]
	assume ebx:ptr TState
	mov esi, [[ebx].tankPixelsOffsetsArrayPTR]
	assume esi:ptr TPoint

	loop_draw_tank:

	mov eax, [[edi].centerPosition.x]
	mov [x], eax
	push 0
	invoke sbyteToDword, [[esi + ecx * sizeof TPoint].x]
	pop eax
	add [x], eax

	mov eax, [[edi].centerPosition.y]
	mov [y], eax
	push 0
	invoke sbyteToDword, [[esi + ecx * sizeof TPoint].y]
	pop eax
	add [y], eax

	push ecx
	invoke SetPixel, [hdc], [x], [y], [color]
	pop ecx

	inc ecx
	cmp ecx, [[ebx].tankPixelsAmount]
	jnz loop_draw_tank

	;mov esi, [[ebx].BarrelEdgeOffsetPTR]
	;assume esi:ptr TPoint
	
	;mov eax, [[edi].centerPosition.x]
	;mov [x], eax
	;invoke sbyteToDword, [esi].x
	;add [x], eax

	;mov eax, [[edi].centerPosition.y]
	;mov [y], eax
	;invoke sbyteToDword, [[esi].y]
	;add [y], eax

	;invoke SetPixel, [hdc], [x], [y], 00ffffffh ; BarrelEdge color
	
	pop esi
	pop edi
	pop edx
	pop ecx
	pop ebx
	pop eax
ret
drawTank endp

drawWalls proc hdc:HDC, wallsPTR:ptr RECT, amountWalls:dword
	local brush:HBRUSH
	local wall:RECT
	push eax
	push ecx
	push edx
	push edi
	push ebx

	invoke CreateSolidBrush, WALLS_COLOR
	mov [brush], eax

	mov edi, [wallsPTR]
	assume edi:ptr RECT

	mov ebx, [amountWalls]
	loop_drawWalls:
		invoke StructCopy, sizeof RECT, addr wall, edi
		inc [wall.right]
		inc [wall.bottom] ; because FillRect excludes the right and bottom borders
		invoke FillRect, [hdc], addr wall, [brush]
		add edi, sizeof RECT
	dec ebx
	jnz loop_drawWalls

	invoke DeleteObject, [brush]

	pop ebx
	pop edi
	pop edx
	pop ecx
	pop eax
ret
drawWalls endp


turnRight proc, tankPTR:ptr TTank, prevTankPTR:ptr TTank, opponentTankPTR:ptr TTank, wallsPTR:ptr RECT, amountWalls:dword, state0PTR:ptr TState, lastStatePTR:ptr TState
	push eax
	push esi
	push ebx
	push edx

	mov esi, [tankPTR]
	assume esi:ptr TTank

	mov ebx, [[esi].statePTR]
	add ebx, sizeof TState
	.if ebx > [lastStatePTR]
	mov ebx, [state0PTR]
	.endif
	mov [[esi].statePTR], ebx

	push 0
	invoke tankTankCollision, esi, [opponentTankPTR]
	pop eax
	mov edx, eax
	.if edx == FALSE
		push 0
		invoke tankIntersectsRectangles, esi, [wallsPTR], [amountWalls]
		pop eax
		mov edx, eax
	.endif
	.if edx == TRUE
		mov ebx, [prevTankPTR]
		assume ebx:ptr TTank
		mov eax, [[ebx].statePTR]
		mov [[esi].statePTR], eax

		jmp end_turnRight
	.endif
	; tank rotated

	end_turnRight:
	pop edx
	pop ebx
	pop esi
	pop eax
ret
turnRight endp

turnLeft proc, tankPTR:ptr TTank, prevTankPTR:ptr TTank, opponentTankPTR:ptr TTank, wallsPTR:ptr RECT, amountWalls:dword, state0PTR:ptr TState, lastStatePTR:ptr TState
	push eax
	push esi
	push ebx
	push edx

	mov esi, [tankPTR]
	assume esi:ptr TTank

	mov ebx, [[esi].statePTR]
	sub ebx, sizeof TState
	.if ebx < [state0PTR]
	mov ebx, [lastStatePTR]
	.endif
	mov [[esi].statePTR], ebx

	push 0
	invoke tankTankCollision, esi, [opponentTankPTR]
	pop eax
	mov edx, eax
	.if edx == FALSE
		push 0
		invoke tankIntersectsRectangles, esi, [wallsPTR], [amountWalls]
		pop eax
		mov edx, eax
	.endif
	.if edx == TRUE
		mov ebx, [prevTankPTR]
		assume ebx:ptr TTank
		mov eax, [[ebx].statePTR]
		mov [[esi].statePTR], eax

		jmp end_turnLeft
	.endif
	; tank rotated

	end_turnLeft:
	pop edx
	pop ebx
	pop esi
	pop eax
ret
turnLeft endp

move proc tankPTR:ptr TTank, prevTankPTR:ptr TTank, opponentTankPTR:ptr TTank, wallsPTR:ptr RECT, amountWalls:dword, forward:byte
	push eax
	push esi
	push ebx
	push edx

	mov esi, [tankPTR]
	assume esi:ptr TTank

	mov ebx, [[esi].statePTR]
	assume ebx:ptr TState
	.if forward == TRUE
		push 0
		invoke sbyteToDword, [[ebx].velocity.x]
		pop eax
		add [[esi].centerPosition.x], eax
		push 0
		invoke sbyteToDword, [[ebx].velocity.y]
		pop eax
		add [[esi].centerPosition.y], eax
	.else
		push 0
		invoke sbyteToDword, [[ebx].velocity.x]
		pop eax
		sub [[esi].centerPosition.x], eax
		push 0
		invoke sbyteToDword, [[ebx].velocity.y]
		pop eax
		sub [[esi].centerPosition.y], eax
	.endif

	push 0
	invoke tankTankCollision, esi, [opponentTankPTR]
	pop eax
	mov edx, eax
	.if edx == FALSE
		push 0
		invoke tankIntersectsRectangles, esi, [wallsPTR], [amountWalls]
		pop eax
		mov edx, eax
	.endif
	.if edx == TRUE
		mov ebx, [prevTankPTR]
		assume ebx:ptr TTank
		mov eax, [[ebx].centerPosition.x]
		mov [[esi].centerPosition.x], eax

		mov eax, [[ebx].centerPosition.y]
		mov [[esi].centerPosition.y], eax

		jmp end_move
	.endif
	
	; tank moved

	end_move:
	pop edx
	pop ebx
	pop esi
	pop eax
ret
move endp

drawCircle proc hdc:HDC, centerX:dword, centerY:dword, radius:dword, outlineColor:COLORREF, insideColor:COLORREF
	;local pen:HPEN
	;local brush:HBRUSH
	push eax
	push ecx
	push edx
	push ebx

	invoke SetDCPenColor, [hdc], [outlineColor]

	invoke SetDCBrushColor, [hdc], [insideColor]

	mov eax, [radius]
	mov ebx, eax
	mov ecx, eax
	mov edx, eax
	neg eax
	neg ebx
	add eax, [centerX]
	add ebx, [centerY]
	add ecx, [centerX]
	add edx, [centerY]
	
	invoke Ellipse, [hdc], eax, ebx, ecx, edx

	;invoke DeleteObject, [pen]
	;invoke DeleteObject, [brush]

	pop ebx
	pop edx
	pop ecx
	pop eax
ret
drawCircle endp

circleRectangleCollision proc, circleCenterX:dword, circleCenterY:dword, radius:dword, rectPTR:ptr RECT ; return value: FALSE - no collision, 1 - left, 2 - top, 3 - right, 4 - bottom
	local testX:dword
	local testY:dword
	local distX:dword
	local distY:dword
	local distance:dword
	local returnValue:dword

	push eax
	push esi
	push ecx
	push edx

	mov dword ptr [returnValue], 5

	mov eax, [circleCenterX]
	mov [testX], eax

	mov eax, [circleCenterY]
	mov [testY], eax

	mov esi, [rectPTR]
	assume esi:ptr RECT

	mov ecx, [circleCenterX]
	mov edx, [circleCenterY]

	.if ecx < [esi].left
		mov eax, [esi].left
		mov [testX], eax
		mov dword ptr [returnValue], 1
	.elseif ecx > [esi].right
		mov eax, [esi].right
		mov [testX], eax
		mov dword ptr [returnValue], 3
	.endif

	.if edx < [esi].top
		mov eax, [esi].top
		mov [testY], eax
		mov dword ptr [returnValue], 2
	.elseif edx > [esi].bottom
		mov eax, [esi].bottom
		mov [testY], eax
		mov dword ptr [returnValue], 4
	.endif

	sub ecx, [testX]
	mov [distX], ecx

	sub edx, [testY]
	mov [distY], edx

	mov eax, [distX]
	imul eax
	mov [distance], eax

	mov eax, [distY]
	imul eax
	add [distance], eax

	mov eax, [radius]
	mul eax
	.if [distance] > eax
		mov dword ptr [returnValue], FALSE
	.endif
	mov eax, [returnValue]

	pop edx
	pop ecx
	pop esi
	mov [ebp + 8 + 16], eax ; [ebp + 8 + bytes_of_params]
	pop eax
ret
circleRectangleCollision endp

drawBullet proc hdc:HDC, bulletPositionPTR:ptr TBullet, outlineColor:COLORREF, insideColor:COLORREF
	push esi
	push eax
	push ecx
	push edx

	mov esi, [bulletPositionPTR]
	assume esi:ptr POINT
	invoke drawCircle, [hdc], [[esi].x], [[esi].y], BULLET_RADIUS, [outlineColor], [insideColor]
	
	pop edx
	pop ecx
	pop eax
	pop esi
ret
drawBullet endp

bulletIntresectsWalls proc, bulletPTR:ptr TBullet, prevBulletPositionPTR:ptr POINT, wallsPTR:ptr RECT, amountWalls:dword
	push eax
	push edi
	push esi
	push ecx

	mov edi, [wallsPTR]
	assume edi:ptr RECT
	mov esi, [bulletPTR]
	assume esi:ptr TBullet

	mov ecx, [amountWalls]
	loop_bulletIntresectsWalls:
		push 0
		invoke circleRectangleCollision, [[esi].centerPosition.x], [[esi].centerPosition.y], BULLET_RADIUS, edi
		pop eax
		.if eax != FALSE
			.if eax == 5
				push ebx
				mov ebx, [prevBulletPositionPTR]
				assume ebx:ptr POINT

				mov eax, [edi].left
				.if [ebx].x <= eax && [esi].centerPosition.x >= eax ; cllision from left edge
					mov eax, 1
					jmp endCheckCollisionEdge
				.endif

				mov eax, [edi].top
				.if [ebx].y <= eax && [esi].centerPosition.y >= eax ; cllision from top edge
					mov eax, 2
					jmp endCheckCollisionEdge
				.endif

				mov eax, [edi].right
				.if [ebx].x >= eax && [esi].centerPosition.x <= eax ; cllision from right edge
					mov eax, 3
					jmp endCheckCollisionEdge
				.endif

				mov eax, [edi].bottom
				.if [ebx].y >= eax && [esi].centerPosition.y <= eax ; cllision from bottom edge
					mov eax, 4
				.endif
				endCheckCollisionEdge:
				pop ebx
			.endif
			jmp end_bulletIntresectsWalls
		.endif

		add edi, sizeof RECT
	dec ecx
	jnz loop_bulletIntresectsWalls

	mov eax, FALSE
	end_bulletIntresectsWalls:
	pop ecx
	pop esi
	pop edi
	mov [ebp + 8 + 16], eax ; [ebp + 8 + bytes_of_params]
	pop eax
ret
bulletIntresectsWalls endp

updateBulletPosition proc, bulletPTR:ptr TBullet, xForward:byte, yForward:byte
	push esi
	push eax

	mov esi, [bulletPTR]
	
	push 0
	invoke sbyteToDword, [[esi].velocity.x]
	pop eax
	.if xForward == FALSE
		neg eax
	.endif
	add [[esi].centerPosition.x], eax

	push 0
	invoke sbyteToDword, [[esi].velocity.y]
	pop eax
	.if yForward == FALSE
		neg eax
	.endif
	add [[esi].centerPosition.y], eax

	pop eax
	pop esi
ret
updateBulletPosition endp

updateBullets proc myTankPTR:ptr TTank, myBulletsPTR:ptr TBullet, maxBullets:byte, bulletLifeDuration:dword, addBullet:byte, wallsPTR:ptr RECT, amountWalls:dword, shotSoundPathPTR:ptr byte, bulletHitWallSoundPathPTR:ptr byte
	local emptyBullet:TBullet
	local prevBulletPosition:POINT
	push eax
	push ecx
	push ebx
	push edx
	push esi
	push edi

	invoke ZeroStruct, sizeof TBullet, addr emptyBullet
	
	mov esi, [myBulletsPTR]
	assume esi:ptr TBullet
	mov edi, [myTankPTR]
	assume edi:ptr TTank
	mov edi, [edi].statePTR
	assume edi:ptr TState
	mov cl, [maxBullets]
	loopUpdateBullets:

	invoke GetTickCount
	sub eax, [[esi].timeShot]
	mov ebx, eax
	push 0
	invoke StructCompare, sizeof TBullet, esi, addr emptyBullet
	pop eax
	.if eax == FALSE && ebx > [bulletLifeDuration]
		invoke StructCopy, sizeof TBullet, esi, addr emptyBullet
	.endif

	push 0
	invoke StructCompare, sizeof TBullet, esi, addr emptyBullet
	pop eax
	.if eax == TRUE && [addBullet] == TRUE
		invoke GetTickCount
		mov [[esi].timeShot], eax

		lea ebx, [[esi].velocity]
		lea edx, [[edi].bulletVelocity]
		invoke StructCopy, sizeof TPoint, ebx, edx

		push edi
		mov edi, [myTankPTR]
		assume edi:ptr TTank
		lea ebx, [[esi].centerPosition]
		assume ebx:ptr POINT
		lea edx, [[edi].centerPosition]
		pop edi
		assume edi:ptr TState
		invoke StructCopy, sizeof POINT, ebx, edx
		mov edx, [[edi].BarrelEdgeOffsetPTR]
		assume edx:ptr TPoint
		push 0
		invoke sbyteToDword, [edx].x
		pop eax
		add [[ebx].x], eax
		mov eax, [[ebx].x]

		push 0
		invoke sbyteToDword, [edx].y
		pop eax
		add [[ebx].y], eax

		mov byte ptr [addBullet], FALSE

		mov eax, SND_FILENAME
		or eax, SND_ASYNC
		push ecx
		invoke PlaySound, [shotSoundPathPTR], NULL, eax
		pop ecx
	.endif
	
	push 0
	invoke StructCompare, sizeof TBullet, esi, addr emptyBullet
	pop eax
	.if eax == FALSE
		invoke StructCopy, sizeof POINT, addr prevBulletPosition, addr [esi].centerPosition
		invoke updateBulletPosition, esi, TRUE, TRUE

		push 0
		invoke bulletIntresectsWalls, esi, addr prevBulletPosition, [wallsPTR], [amountWalls]
		pop eax
		.if eax != FALSE
			invoke updateBulletPosition, esi, FALSE, FALSE

			.if eax == 1 || eax == 3
				neg [[esi].velocity.x]
			.elseif eax == 2 || eax == 4
				neg [[esi].velocity.y]
			.endif

			mov eax, SND_FILENAME
			or eax, SND_ASYNC
			push ecx
			invoke PlaySound, [bulletHitWallSoundPathPTR], NULL, eax
			pop ecx

			invoke updateBulletPosition, esi, TRUE, TRUE
		.endif
	.endif

	add esi, sizeof TBullet
	dec cl
	jnz loopUpdateBullets

	pop edi
	pop esi
	pop edx
	pop ebx
	pop ecx
	pop eax
ret
updateBullets endp

; bulletsToRectangles proc bulletsPTR:ptr TBullet, maxBullets:byte, toSave:ptr RECT, radius:dword
; 	local emptyBullet:TBullet
; 	local rect:RECT
; 	push eax
; 	push esi
; 	push edi
; 	push ecx
; 	push edx
; 
; 	invoke ZeroStruct, sizeof TBullet, addr emptyBullet
; 
; 	mov esi, [bulletsPTR]
; 	assume esi:ptr TBullet
; 
; 	mov edi, [toSave]
; 	assume edi:ptr RECT
; 	
; 	mov edx, 0
; 
; 	mov cl, maxBullets
; 	loop_bulletsToRectangles:
; 		push 0
; 		invoke StructCompare, sizeof TBullet, esi, addr emptyBullet
; 		pop eax
; 		.if eax == FALSE
; 			mov eax, [[esi].centerPosition.x]
; 			sub eax, [radius]
; 			mov [rect.left], eax
; 
; 			mov eax, [[esi].centerPosition.x]
; 			add eax, [radius]
; 			mov [rect.right], eax
; 
; 			mov eax, [[esi].centerPosition.y]
; 			sub eax, [radius]
; 			mov [rect.top], eax
; 
; 			mov eax, [[esi].centerPosition.y]
; 			add eax, [radius]
; 			mov [rect.bottom], eax
; 
; 			invoke StructCopy, sizeof RECT, edi, addr rect
; 			inc edx
; 		.endif
; 
; 		add esi, sizeof TBullet
; 		add edi, sizeof RECT
; 	dec cl
; 	jz bulletsToRectangles
; 	mov eax, edx
; 
; 	pop edx
; 	pop ecx
; 	pop edi
; 	pop esi
; 	mov [ebp + 8 + 16], eax ; [ebp + 8 + bytes_of_params]
; 	pop eax
; ret
; bulletsToRectangles endp

send_tcp_packet proc sock:SOCKET, bufferPTR:ptr byte, bufferLength:dword
	push eax
    push ecx
    push edx
    
    invoke send, [sock], [bufferPTR], [bufferLength], 0

    pop edx
    pop ecx
    pop eax

ret
send_tcp_packet endp

sendShortMessage proc sock:SOCKET, msg:byte
	local buf:byte
	push eax
	mov al, [msg]
	mov [buf], al
	invoke send_tcp_packet, [sock], addr buf, 1

	pop eax
ret
sendShortMessage endp

bulletIntresectsTank proc, myTankPTR:ptr TTank, bulletsPTR:ptr TBullet, maxBullets: byte
	local emptyBullet:TBullet
	local tankRectangle:RECT
	push eax
	push ecx
	push edx
	push esi

	invoke ZeroStruct, sizeof TBullet, addr emptyBullet

	mov esi, [bulletsPTR]
	assume esi:ptr TBullet

	mov edx, [myTankPTR]
	invoke getCurrentTankRectangle, edx, addr tankRectangle
	
	mov cl, maxBullets
	loop_bulletIntresectsTank:
		push 0
		invoke StructCompare, sizeof TBullet, esi, addr emptyBullet
		pop eax
		.if eax == FALSE
			push 0
			invoke circleRectangleCollision, [[esi].centerPosition.x], [[esi].centerPosition.y], BULLET_RADIUS, addr tankRectangle
			pop eax
			.if eax != FALSE
				mov eax, TRUE
				jmp end_bulletIntresectsTank
			.endif
		.endif

		add esi, sizeof TBullet
	dec cl
	jnz loop_bulletIntresectsTank

	mov eax, FALSE
	end_bulletIntresectsTank:

	pop esi
	pop edx
	pop ecx
	mov [ebp + 8 + 12], eax ; [ebp + 8 + bytes_of_params]
	pop eax
ret
bulletIntresectsTank endp

GameLoop proc, paramsPTR:ptr GameLoopParams
	local counter:dword
	local opponentBulletsRects[MAX_MAX_BULLETS]:RECT
	local checkRotations:BOOLEAN
	local time:dword
	push esi
	push ebx
	push edi
	push eax
	push edx
	push ecx

	mov edx, [paramsPTR]
	assume edx:ptr GameLoopParams

	mov esi, [[edx].myTankPTR]
	assume esi:ptr TTank

	mov ecx, [[edx].myPrevTankPTR]
	assume ecx:ptr TTank

	mov ebx, [[edx].w_a_s_d_space]

	mov edi, [[edx].gameOverPTR]
	.while BOOLEAN PTR [edi] == FALSE
		push edx
		push ecx
		invoke GetTickCount
		mov [time], eax
		pop ecx
		pop edx

		;push 0
		;invoke bulletsToRectangles, [[edx].opponentBulletsPTR], [[edx].maxBullets], addr opponentBulletsRects, BULLET_RADIUS
		;pop eax
		;.if eax > 0
			;push 0
			;invoke tankIntersectsRectangles, esi, addr opponentBulletsRects, eax
			;pop eax
		push 0
		invoke bulletIntresectsTank, esi, [[edx].opponentBulletsPTR], [[edx].maxBullets]
		pop eax
		.if eax == TRUE ; got hitted by a bullet
			invoke sendShortMessage, [[edx].sock], END_ROUND_MSG

			mov eax, SND_FILENAME
			or eax, SND_ASYNC
			push edx
			invoke PlaySound, [[edx].explosionSoundPathPTR], NULL, eax
			pop edx

			push edi
			mov edi, [[edx].gameOverPTR]
			mov BOOLEAN ptr [edi], TRUE
			mov edi, [[edx].losePTR]
			mov BOOLEAN ptr [edi], TRUE
			pop edi
			.break
		.endif
		;.endif
		mov eax, [counter]
		;shr eax, 1
		;jc endGameLoop
		;shr eax, 1
		;jc endGameLoop

		shr eax, 1
		jc update_bullets

		shr eax, 1
		jnc checkRotations_TRUE
		mov BOOLEAN ptr [checkRotations], FALSE
		jmp after_setting_checkRotations

		checkRotations_TRUE:
		mov BOOLEAN ptr [checkRotations], TRUE

		after_setting_checkRotations:
		mov eax, 0
		mov al, [[edx].maxBullets]
		sal eax, 4 ; multiply by sizeof RECT
		push ebx
		mov ebx, eax
		invoke ZeroStruct, ebx, addr opponentBulletsRects
		pop ebx

		.if byte ptr [ebx] == TRUE
			invoke move, esi, ecx, [[edx].opponentTankPTR], [[edx].wallsPTR], [[edx].amountWalls], TRUE
		.elseif byte ptr [ebx+2] == TRUE
			invoke move, esi, ecx, [[edx].opponentTankPTR], [[edx].wallsPTR], [[edx].amountWalls], FALSE

			.if BOOLEAN ptr [checkRotations] == TRUE
				.if byte ptr [ebx+1] == TRUE
					invoke turnRight, esi, ecx, [[edx].opponentTankPTR], [[edx].wallsPTR], [[edx].amountWalls], [[edx].state0PTR], [[edx].lastStatePTR]
				.elseif byte ptr [ebx+3] == TRUE
					invoke turnLeft, esi, ecx, [[edx].opponentTankPTR], [[edx].wallsPTR], [[edx].amountWalls], [[edx].state0PTR], [[edx].lastStatePTR]
				.endif
			.endif
			jmp update_bullets
		.endif
		
		.if BOOLEAN ptr [checkRotations] == TRUE
			.if byte ptr [ebx+1] == TRUE
				invoke turnLeft, esi, ecx, [[edx].opponentTankPTR], [[edx].wallsPTR], [[edx].amountWalls], [[edx].state0PTR], [[edx].lastStatePTR]
			.elseif byte ptr [ebx+3] == TRUE
				invoke turnRight, esi, ecx, [[edx].opponentTankPTR], [[edx].wallsPTR], [[edx].amountWalls], [[edx].state0PTR], [[edx].lastStatePTR]
			.endif
		.endif

		update_bullets:
		invoke StructCopy, sizeof TTank, ecx, esi

		invoke updateBullets, esi, [[edx].myBulletsPTR], [[edx].maxBullets], [[edx].bulletLifeDuration], byte ptr [ebx+4], [[edx].wallsPTR], [[edx].amountWalls], [[edx].shotSoundPathPTR], [[edx].bulletHitWallSoundPathPTR]
		mov byte ptr [ebx+4], FALSE ; not pressing space anymore
		
		endGameLoop:
		push edx
		push ecx
		invoke GetTickCount
		sub eax, [time]
		neg eax
		add eax, 12
		.if sdword ptr eax <= 0
			jmp noSleep
		.endif
		invoke Sleep, eax
		noSleep:
		pop ecx
		pop edx
		.if [counter] == 4294967280
			mov [counter], 0
		.endif
		inc [counter]

	.endw

	pop ecx
	pop edx
	pop eax
	pop edi
	pop ebx
	pop esi
ret
GameLoop endp

positionsMsgToTankAndBullets proc msgPTR:ptr byte, opponentTankPTR:ptr TTank, state0PTR:ptr TState, opponentBulletsPTR:ptr TBullet, maxBullets:byte
	push esi
	push edi
	push ebx
	push ecx
	
	mov esi, [msgPTR]

	; tank
	mov edi, [opponentTankPTR]
	assume edi:ptr TTank

	invoke StructCopy, sizeof POINT, addr [edi].centerPosition, esi
	add esi, sizeof POINT

	mov ebx, [state0PTR]
	add ebx, dword ptr [esi]
	mov [[edi].statePTR], ebx
	add esi, sizeof dword

	; bullets
	mov edi, [opponentBulletsPTR]
	assume edi:ptr TBullet

	mov cl, [maxBullets]
	loop_msgToBullets:
		invoke StructCopy, sizeof POINT, addr [edi].centerPosition, esi

		add esi, sizeof POINT
		add edi, sizeof TBullet
	dec cl
	jnz loop_msgToBullets


	pop ecx
	pop ebx
	pop edi
	pop esi

ret
positionsMsgToTankAndBullets endp

startGameMsgToWalls proc wallsInMsgPTR:ptr byte, amountWalls:dword, wallsPTR:ptr RECT
	push eax
	mov eax, sizeof RECT
	mul [amountWalls] 

	invoke StructCopy, eax, [wallsPTR], [wallsInMsgPTR]
	
	pop eax
ret
startGameMsgToWalls endp

recvMessages proc argsPTR:ptr recvMessagesParams
    local buf[1024]:byte
	push eax
	push ecx
	push edx
	push edi
	
	mov edi, [argsPTR]
	assume edi:ptr recvMessagesParams

	loop_recvReady:
		invoke recv, [[edi].sock], addr buf, lengthof buf, 0
		.if byte ptr [buf] == SWAP_LOCATIONS_MSG
			invoke StructCopy, sizeof TTank, [[edi].myPrevTankPTR], [[edi].opponentTankPTR]
			invoke StructCopy, sizeof TTank, [[edi].opponentTankPTR], [[edi].myTankPTR]
			invoke StructCopy, sizeof TTank, [[edi].myTankPTR], [[edi].myPrevTankPTR]
			invoke StructCopy, sizeof TTank, [[edi].opponentPrevTankPTR], [[edi].opponentTankPTR]
		.endif
	cmp byte ptr [buf], START_GAME_MSG
	jne loop_recvReady

	mov eax, dword ptr [buf+5] ; bulletLife
	mov ecx, [[edi].bulletLifePTR]
	mov dword ptr [ecx], eax

	mov al, byte ptr [buf+9] ; maxBulletsInAnyMoment
	mov ecx, [[edi].maxBulletsInAnyMomentPTR]
	mov byte ptr [ecx], al

	mov eax, dword ptr [buf+1] ; numberOfWalls
	mov ecx, [[edi].numberOfWallsPTR]
	mov dword ptr [ecx], eax
	invoke startGameMsgToWalls, addr [buf+10], eax, [[edi].wallsPTR]

	mov ecx, [[edi].exitMessageLoopPTR]
	mov BOOLEAN PTR [ecx], TRUE

	.while TRUE
		invoke recv, [[edi].sock], addr buf, lengthof buf, 0
		.if byte ptr [buf] == POSITIONS_MSG
			mov ecx,  [[edi].maxBulletsInAnyMomentPTR]
			invoke positionsMsgToTankAndBullets, addr [buf+1], [[edi].opponentTankPTR], [[edi].state0PTR], [[edi].opponentBulletsPTR], byte ptr [ecx]
		.elseif byte ptr [buf] == END_ROUND_MSG
			mov eax, SND_FILENAME
			or eax, SND_ASYNC
			invoke PlaySound, [[edi].explosionSoundPathPTR], NULL, eax

			mov ecx, [[edi].gameOverPTR]
			mov BOOLEAN ptr [ecx], TRUE
			mov ecx, [[edi].winPTR]
			mov BOOLEAN ptr [ecx], TRUE
			.break
		.endif
	.endw

	pop edi
	pop edx
	pop ecx
	pop eax
	
ret
recvMessages endp

tankToMsg proc tankPTR:ptr TTank, state0PTR:ptr TState, toSavePTR:ptr byte
	push esi
	push edi
	push edx

	mov esi, [tankPTR]
	assume esi:ptr TTank

	mov edi, [toSavePTR]

	invoke StructCopy, sizeof POINT, edi, addr [esi].centerPosition
	mov eax, sizeof POINT

	mov edx, [[esi].statePTR]
	sub edx, [state0PTR]
	mov dword ptr [edi + sizeof POINT], edx
	add eax, sizeof dword

	pop edx
	pop edi
	pop esi
ret
tankToMsg endp

bulletsToMsg proc myBulletsPTR:ptr TBullet, maxBullets:byte, toSavePTR:ptr byte
	push esi
	push edi
	push ecx

	mov esi, [myBulletsPTR]
	mov edi, [toSavePTR]
	mov cl, [maxBullets]
	loop_bulletsToMsg:
		invoke StructCopy, sizeof POINT, edi, addr [esi].centerPosition
		add esi, sizeof TBullet
		add edi, sizeof POINT
	dec cl
	jnz loop_bulletsToMsg
	
	sub edi, [toSavePTR]
	mov eax, edi

	pop ecx
	pop edi
	pop esi
ret
bulletsToMsg endp

sendPositionsMsg proc sock:SOCKET, myTankPTR:ptr TTank, state0PTR:ptr TState, myBulletsPTR:ptr TBullet, maxBullets:byte
	local buf[1024]:byte
	push ecx
	push eax

	mov byte ptr [buf], POSITIONS_MSG
	mov ecx, 1

	invoke tankToMsg, [myTankPTR], [state0PTR], addr [buf + ecx]
	add ecx, eax

	invoke bulletsToMsg, [myBulletsPTR], [maxBullets], addr [buf + ecx]
	add ecx, eax

	invoke send_tcp_packet, [sock], addr buf, ecx

	pop eax
	pop ecx
ret
sendPositionsMsg endp

keyPressed proc virtualKeyCode:dword, w_a_s_d_spacePTR:ptr byte, gameOverPTR:ptr BOOLEAN
	push esi

	mov esi, [gameOverPTR]
	.if BOOLEAN ptr [esi] == TRUE
		pop esi
		ret
	.endif

	.if [virtualKeyCode] == VK_W
		mov esi, [w_a_s_d_spacePTR]
		mov byte ptr [esi+2], FALSE

		mov byte ptr [esi], TRUE
	.elseif [virtualKeyCode] == VK_A
		mov esi, [w_a_s_d_spacePTR]
		mov byte ptr [esi+3], FALSE
		
		mov byte ptr [esi+1], TRUE
	.elseif [virtualKeyCode] == VK_S
		mov esi, [w_a_s_d_spacePTR]
		mov byte ptr [esi], FALSE

		mov byte ptr [esi+2], TRUE
	.elseif [virtualKeyCode] == VK_D
		mov esi, [w_a_s_d_spacePTR]
		mov byte ptr [esi+1], FALSE
		
		mov byte ptr [esi+3], TRUE
	.endif

	pop esi
ret
keyPressed endp

keyReleased proc virtualKeyCode:dword, w_a_s_d_spacePTR:ptr byte, gameOverPTR:ptr BOOLEAN
	push esi

	mov esi, [gameOverPTR]
	.if BOOLEAN ptr [esi] == TRUE
		pop esi
		ret
	.endif

	.if [virtualKeyCode] == VK_W
		mov esi, [w_a_s_d_spacePTR]
		mov byte ptr [esi], FALSE
	.elseif [virtualKeyCode] == VK_A
		mov esi, [w_a_s_d_spacePTR]
		mov byte ptr [esi+1], FALSE
	.elseif [virtualKeyCode] == VK_S
		mov esi, [w_a_s_d_spacePTR]
		mov byte ptr [esi+2], FALSE
	.elseif [virtualKeyCode] == VK_D
		mov esi, [w_a_s_d_spacePTR]
		mov byte ptr [esi+3], FALSE
	.elseif [virtualKeyCode] == VK_SPACE
		mov esi, [w_a_s_d_spacePTR]
		mov byte ptr [esi+4], TRUE
	.endif

	pop esi
ret
keyReleased endp

windowProc proc hWindow:HWND, uMsg:UINT, wParam:WPARAM, lParam:LPARAM
	local ps:PAINTSTRUCT
	local hdc:HDC
	local hdcBack:HDC
	local hbmBack:HBITMAP
	local hOld:HANDLE
	local emptyBullet:TBullet
	local rectangle:RECT
	local pen:HANDLE
	local brush:HANDLE
	.if [uMsg] == WM_CLOSE
		invoke DestroyWindow, [hWindow]
	.elseif [uMsg] == WM_DESTROY
		mov BOOLEAN ptr [quitProgram], TRUE
	.elseif [uMsg] == WM_MOVE
	.elseif [uMsg] == WM_SIZE
	.elseif [uMsg] == WM_KEYDOWN
		invoke keyPressed, [wParam], addr w_a_s_d_space, addr gameOver
	.elseif [uMsg] == WM_KEYUP
		invoke keyReleased, [wParam], addr w_a_s_d_space, addr gameOver
	.elseif [uMsg] == WM_TIMER
		.if [wParam] == TIMER_REDRAW
			mov eax, RDW_INVALIDATE
			or eax, RDW_UPDATENOW
			invoke RedrawWindow, [hWindow], NULL, NULL, eax
		.elseif [wParam] == TIMER_SEND_POSITIONS_MSG
			invoke sendPositionsMsg, [Socket], addr myTank, addr state0, addr myBullets, [maxBulletsInAnyMoment]
		.endif
		mov eax, 0
	.elseif [uMsg] == WM_PAINT
		.if BOOLEAN ptr [win] == TRUE
			invoke LoadImage, NULL, addr winImagePath, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
			invoke CreatePatternBrush, eax
			invoke SetClassLong, [hWindow], GCLP_HBRBACKGROUND, eax
			invoke GetDC, [hWindow]
			mov ebx, eax
			invoke SendMessage, [hWindow], WM_ERASEBKGND, eax, NULL
			invoke ReleaseDC, [hWindow], ebx
			mov BOOLEAN ptr [win], FALSE

		.elseif BOOLEAN ptr [lose] == TRUE
			invoke LoadImage, NULL, addr loseImagePath, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
			invoke CreatePatternBrush, eax
			invoke SetClassLong, [hWindow], GCLP_HBRBACKGROUND, eax
			invoke GetDC, [hWindow]
			mov ebx, eax
			invoke SendMessage, [hWindow], WM_ERASEBKGND, eax, NULL
			invoke ReleaseDC, [hWindow], ebx
			mov BOOLEAN ptr [lose], FALSE
		.endif

		.if BOOLEAN ptr [gameOver] == FALSE
			invoke BeginPaint, [hWindow], addr ps
			mov [hdc], eax
			invoke CreateCompatibleDC, eax
			mov [hdcBack], eax
			invoke CreateCompatibleBitmap, [hdc], WINDOW_WIDTH, WINDOW_HEIGHT
			mov [hbmBack], eax
			invoke SelectObject, [hdcBack], [hbmBack]
			mov [hOld], eax

			; draw background
			invoke GetClientRect, [hWindow], addr rectangle
			invoke CreateSolidBrush, BACKGROUND_COLOR
			mov ebx, eax
			invoke FillRect, [hdcBack], addr rectangle, eax
			invoke DeleteObject, ebx

			; draw walls
			invoke drawWalls, [hdcBack], addr walls, [numberOfWalls]

			;draw my bullets
			invoke ZeroStruct, sizeof TBullet, addr emptyBullet

			invoke GetStockObject, DC_PEN
			mov [pen], eax
			invoke SelectObject, [hdcBack], eax
			

			invoke GetStockObject, DC_BRUSH
			mov [brush], eax
			invoke SelectObject, [hdcBack], eax


			lea esi, myBullets
			assume esi:ptr TBullet
			mov cl, [maxBulletsInAnyMoment]
			loopDrawMyBullets:
				push 0
				invoke StructCompare, sizeof TBullet, esi, addr emptyBullet
				pop eax
				.if eax == FALSE
					invoke drawBullet, [hdcBack], addr [esi].centerPosition, MY_BULLETS_OUTLINE_COLOR, MY_BULLETS_INSIDE_COLOR
				.endif
				add esi, sizeof TBullet
			dec cl
			jnz loopDrawMyBullets

			;draw opponent bullets		
			lea esi, opponentBullets
			assume esi:ptr TBullet
			mov cl, [maxBulletsInAnyMoment]
			loopDrawOpponentBullets:
				push 0
				invoke StructCompare, sizeof TBullet, esi, addr emptyBullet
				pop eax
				.if eax == FALSE
					invoke drawBullet, [hdcBack], addr [esi].centerPosition, OPPONENT_BULLETS_OUTLINE_COLOR, OPPONENT_BULLETS_INSIDE_COLOR
				.endif
				add esi, sizeof TBullet
			dec cl
			jnz loopDrawOpponentBullets

			; draw my tank
			lea esi, myTank
			invoke drawTank, [hdcBack], esi, MY_TANK_COLOR

			; draw opponent tank
			lea esi, opponentTank
			invoke drawTank, [hdcBack], esi, OPPONENT_TANK_COLOR

			invoke BitBlt, [hdc], 0, 0, WINDOW_WIDTH, WINDOW_HEIGHT, [hdcBack], 0, 0, SRCCOPY

			invoke SelectObject, [hdcBack], [hOld]
			invoke DeleteDC, [hdcBack]
			invoke DeleteObject, [hbmBack]
			invoke DeleteObject, [pen]
			invoke DeleteObject, [brush]
			invoke EndPaint, [hWindow], addr ps
		.endif
		
		mov eax, 0
	.else
		invoke DefWindowProc, [hWindow], [uMsg], [wParam], [lParam]
	.endif

ret
windowProc endp

readyScreenWindowProc proc hWindow:HWND, uMsg:UINT, wParam:WPARAM, lParam:LPARAM
	.if [uMsg] == WM_CLOSE
		invoke DestroyWindow, [hWindow]
	.elseif [uMsg] == WM_DESTROY
		invoke TerminateThread, [hRecvReadyThread], 0
		mov BOOLEAN ptr [quitProgram], TRUE
	.elseif [uMsg] == WM_MOVE
	.elseif [uMsg] == WM_SIZE
	.elseif [uMsg] == WM_KEYDOWN
		.if [wParam] == VK_R && [myReady] == FALSE
			.if BOOLEAN ptr [inInstructions] == TRUE
				invoke LoadImage, NULL, addr instructionsRImagePath, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
			.else
				invoke LoadImage, NULL, addr startingRImagePath, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
			.endif
			invoke CreatePatternBrush, eax
			mov ebx, eax
			invoke SetClassLong, [hWindow], GCLP_HBRBACKGROUND, eax
			invoke DeleteObject, ebx
			invoke GetDC, [hWindow]
			mov ebx, eax
			invoke SendMessage, [hWindow], WM_ERASEBKGND, eax, NULL
			invoke ReleaseDC, [hWindow], ebx

			invoke sendShortMessage, [Socket], READY_MSG
			mov BOOLEAN ptr [myReady], TRUE
		.endif
		.if [wParam] == VK_I && BOOLEAN ptr [inInstructions] == FALSE
			.if [myReady] == TRUE
				invoke LoadImage, NULL, addr instructionsRImagePath, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
			.else
				invoke LoadImage, NULL, addr instructionsNoRImagePath, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
			.endif
			invoke CreatePatternBrush, eax
			mov ebx, eax
			invoke SetClassLong, [hWindow], GCLP_HBRBACKGROUND, eax
			invoke DeleteObject, ebx
			invoke GetDC, [hWindow]
			mov ebx, eax
			invoke SendMessage, [hWindow], WM_ERASEBKGND, eax, NULL
			invoke ReleaseDC, [hWindow], ebx

			mov BOOLEAN ptr [inInstructions], TRUE
		.elseif [wParam] == VK_B && BOOLEAN ptr [inInstructions] == TRUE
			.if [myReady] == TRUE
				invoke LoadImage, NULL, addr startingRImagePath, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
			.else
				invoke LoadImage, NULL, addr startingNoRImagePath, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
			.endif
			invoke CreatePatternBrush, eax
			mov ebx, eax
			invoke SetClassLong, [hWindow], GCLP_HBRBACKGROUND, eax
			invoke DeleteObject, ebx
			invoke GetDC, [hWindow]
			mov ebx, eax
			invoke SendMessage, [hWindow], WM_ERASEBKGND, eax, NULL
			invoke ReleaseDC, [hWindow], ebx

			mov BOOLEAN ptr [inInstructions], FALSE
		.endif
	.elseif [uMsg] == WM_PAINT
		.if BOOLEAN ptr [inInstructions] == TRUE
			.if [myReady] == TRUE
				invoke LoadImage, NULL, addr instructionsRImagePath, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
			.else
				invoke LoadImage, NULL, addr instructionsNoRImagePath, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
			.endif
		.else
			.if [myReady] == TRUE
				invoke LoadImage, NULL, addr startingRImagePath, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
			.else
				invoke LoadImage, NULL, addr startingNoRImagePath, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
			.endif
		.endif

		invoke CreatePatternBrush, eax
		invoke SetClassLong, [hWindow], GCLP_HBRBACKGROUND, eax
		invoke GetDC, [hWindow]
		mov ebx, eax
		invoke SendMessage, [hWindow], WM_ERASEBKGND, eax, NULL
		invoke ReleaseDC, [hWindow], ebx
		mov eax, 0
	.else
		invoke DefWindowProc, [hWindow], [uMsg], [wParam], [lParam]
	.endif
ret
readyScreenWindowProc endp


MessagesLoop proc exitMessageLoopPTR:ptr BOOLEAN, quitProgramPTR:ptr BOOLEAN
	local sMSG:MSG
	push eax
	push ecx
	push edx
	push esi

	mov esi, [exitMessageLoopPTR]
	mov edi, [quitProgramPTR]
	.while BOOLEAN ptr [edi] == FALSE && BOOLEAN ptr [esi] == FALSE
		mov eax, PM_REMOVE
		invoke PeekMessage, addr sMSG, NULL, 0, 0, eax
		cmp eax, 0
		je endMessageLoop
		invoke TranslateMessage, addr sMSG
		invoke DispatchMessage, addr sMSG
		endMessageLoop:
	.endw
	afterMessageLoop:
	
	pop esi
	pop edx
	pop ecx
	pop eax
ret
MessagesLoop endp

_main proc
	local sWNDCLASSEXA:WNDCLASSEXA
	local addressToConnect:sockaddr_in
	local AmountBytesRead:dword
	local hConsoleOut:HANDLE

	invoke GetStdHandle, STD_OUTPUT_HANDLE  ; Get a handle to console SCREEN.
	mov [hConsoleOut], eax
	invoke WriteConsole, [hConsoleOut], addr enterIPMsg, lengthof enterIPMsg, NULL, NULL

	invoke GetStdHandle, STD_INPUT_HANDLE  ; Get a handle to console SCREEN.
	mov ebx, eax
	invoke ReadConsole, ebx, addr ipToConnect, lengthof ipToConnect, addr AmountBytesRead, NULL
	mov ecx, AmountBytesRead
	mov byte ptr [ipToConnect+ecx], 0


	invoke WSAStartup, 2, addr wsaData
    invoke socket, AF_INET, SOCK_STREAM, IPPROTO_TCP
	mov [Socket], eax

	mov [addressToConnect.sin_family], AF_INET
	
	invoke htons, [portToConnect]
    mov [addressToConnect.sin_port], ax
	
	invoke inet_addr, addr ipToConnect
    mov [addressToConnect.sin_addr], eax
    
    invoke connect, [Socket], addr addressToConnect, sizeof addressToConnect
	.if eax == SOCKET_ERROR
		invoke WSAGetLastError
		.if eax == WSAENETUNREACH || eax == WSAEADDRNOTAVAIL
			invoke WriteConsole, [hConsoleOut], addr invalidIPMsg, lengthof invalidIPMsg, NULL, NULL
		.elseif eax == WSAECONNREFUSED
			invoke WriteConsole, [hConsoleOut], addr connectionRefusedMsg, lengthof connectionRefusedMsg, NULL, NULL
		.endif
		jmp endMain
	.endif
	
	invoke GetModuleHandle, NULL
	mov [hInstance], eax
	
	mov [sWNDCLASSEXA.cbSize], sizeof WNDCLASSEX
	mov [sWNDCLASSEXA.style], 0
	mov [sWNDCLASSEXA.lpfnWndProc], [readyScreenWindowProc]
	mov [sWNDCLASSEXA.cbClsExtra], 0
	mov [sWNDCLASSEXA.cbWndExtra], 0	
	mov eax, [hInstance]
	mov [sWNDCLASSEXA.hInstance], eax
	invoke LoadIcon, NULL, IDI_APPLICATION
	mov [sWNDCLASSEXA.hIcon], eax
	invoke LoadCursor, NULL, IDC_CROSS
	mov [sWNDCLASSEXA.hCursor], eax

	invoke LoadImage, NULL, addr startingNoRImagePath, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
	invoke CreatePatternBrush, eax
	mov [sWNDCLASSEXA.hbrBackground], eax

	mov [sWNDCLASSEXA.lpszMenuName], 0
	mov [sWNDCLASSEXA.lpszClassName], offset className
	invoke LoadIcon, NULL, IDI_APPLICATION
	mov [sWNDCLASSEXA.hIconSm], eax
	invoke RegisterClassEx, addr sWNDCLASSEXA ; return value is calss atom
	
	mov eax, WS_OVERLAPPEDWINDOW
	xor eax, WS_THICKFRAME ; unresizable
	xor eax, WS_MAXIMIZEBOX ; unmaximizable
	push eax
	invoke AdjustWindowRectEx, addr clientAreaRectangle, eax, FALSE, WS_EX_CLIENTEDGE
	pop eax
	mov ecx, [clientAreaRectangle.right]
	sub ecx, [clientAreaRectangle.left]
	mov edx, [clientAreaRectangle.bottom]
	sub edx, [clientAreaRectangle.top]
	invoke CreateWindowEx, WS_EX_CLIENTEDGE, addr className, addr windowName, eax, CW_USEDEFAULT, CW_USEDEFAULT, ecx, edx, NULL, NULL, [hInstance], NULL 
	mov [windowHandle], eax

	invoke ShowWindow, [windowHandle], SW_SHOWNORMAL

	mov eax, [Socket]
	mov [recvMessagesArgs.sock], eax

	mov [recvMessagesArgs.winPTR], offset win

	mov [recvMessagesArgs.explosionSoundPathPTR], offset explosionSoundPath

	invoke CreateThread, NULL, NULL, [recvMessages], addr recvMessagesArgs, 0, NULL
	mov [hRecvReadyThread], eax

	invoke MessagesLoop, addr exitMessageLoop, addr quitProgram
	mov [exitMessageLoop], FALSE
	
	invoke SetWindowLong, [windowHandle], GWLP_WNDPROC, addr windowProc

	invoke SetTimer, [windowHandle], TIMER_REDRAW, 15, NULL

	mov eax, [windowHandle]
	mov [GameLoopArgs.windowHandle], eax

	mov al, [maxBulletsInAnyMoment]
	mov [GameLoopArgs.maxBullets], al

	mov eax, [bulletLife]
	mov [GameLoopArgs.bulletLifeDuration], eax

	mov eax, [numberOfWalls]
	mov [GameLoopArgs.amountWalls], eax

	mov eax, [Socket]
	mov [GameLoopArgs.sock], eax

	mov [GameLoopArgs.explosionSoundPathPTR], offset explosionSoundPath

	invoke CreateThread, NULL, NULL, [GameLoop], addr GameLoopArgs, 0, NULL
	mov [hGameLoopThread], eax

	invoke SetTimer, [windowHandle], TIMER_SEND_POSITIONS_MSG, 5, NULL


	invoke MessagesLoop, addr exitMessageLoop, addr quitProgram

	endMain:
	invoke closesocket, [Socket]
    invoke WSACleanup
	invoke ExitProcess, 0
ret
_main endp
end _main